<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\EssEvSocoApp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\EssEvSocoApp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Sep 23 08:55:12 2019
<BR><P>
<H3>Maximum Stack Usage =       5676 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BleRxDataHandler &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[301]">std_n</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[1cf]">nrf_log_frontend_std_0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[301]">std_n</a><BR>
 <LI><a href="#[1e1]">app_util_critical_region_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[1df]">app_util_critical_region_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[2ff]">nrf_memobj_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[2be]">memobj_op</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[2d4]">nrf_balloc_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[2d3]">nrf_balloc_alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[239]">log_skip</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">assert_nrf_callback</a><BR>
 <LI><a href="#[7e]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[7d]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[72]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e9]">queue_process</a><BR>
 <LI><a href="#[363]">pm_handler_flash_clean_on_return</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35d]">pm_handler_flash_clean</a><BR>
 <LI><a href="#[360]">rank_highest</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35d]">pm_handler_flash_clean</a><BR>
 <LI><a href="#[23a]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23a]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[38]">HalSpeedTimerIntHandler</a> from motorspeedhal.o(i.HalSpeedTimerIntHandler) referenced from motorspeedhal.o(i.MotorSpeedHalHwInit)
 <LI><a href="#[5]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from nrfx_i2s.o(i.I2S_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[39]">MotorSpeedHalIrqHandler</a> from motorspeedhal.o(i.MotorSpeedHalIrqHandler) referenced from motorspeedhal.o(i.MotorSpeedHalHwInit)
 <LI><a href="#[12]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from nrfx_twim.o(.constdata)
 <LI><a href="#[11]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from actiontick.o(i.SysTick_Handler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[19]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER1_IRQHandler</a> from nrfx_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER2_IRQHandler</a> from nrfx_timer.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">TestModelTimeIntHandlerNull</a> from testmodel.o(i.TestModelTimeIntHandlerNull) referenced from testmodel.o(i.InitTestModelTimer)
 <LI><a href="#[f]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[47]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[65]">app_shutdown_handler</a> from main.o(i.app_shutdown_handler) referenced from main.o(pwr_mgmt_data0)
 <LI><a href="#[3d]">apply_pending_handle</a> from gatt_cache_manager.o(i.apply_pending_handle) referenced from gatt_cache_manager.o(i.gcm_ble_evt_handler)
 <LI><a href="#[68]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from main.o(sdh_ble_observers1)
 <LI><a href="#[73]">ble_advertising_on_sys_evt</a> from ble_advertising.o(i.ble_advertising_on_sys_evt) referenced from main.o(sdh_soc_observers1)
 <LI><a href="#[6d]">ble_dfu_buttonless_on_ble_evt</a> from ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt) referenced from ble_dfu.o(sdh_ble_observers2)
 <LI><a href="#[74]">ble_dfu_buttonless_on_sys_evt</a> from ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt) referenced from ble_dfu_unbonded.o(sdh_soc_observers1)
 <LI><a href="#[40]">ble_dfu_evt_handler</a> from main.o(i.ble_dfu_evt_handler) referenced from main.o(i.main)
 <LI><a href="#[66]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[69]">ble_evt_handler</a> from bsp_btn_ble.o(i.ble_evt_handler) referenced 3 times from bsp_btn_ble.o(sdh_ble_observers1)
 <LI><a href="#[6f]">ble_evt_handler</a> from main.o(i.ble_evt_handler) referenced from main.o(sdh_ble_observers3)
 <LI><a href="#[6e]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from bleservice.o(sdh_ble_observers2)
 <LI><a href="#[77]">buttonless_dfu_sdh_state_observer</a> from main.o(i.buttonless_dfu_sdh_state_observer) referenced from main.o(sdh_state_observers0)
 <LI><a href="#[4f]">car_update_pending_handle</a> from gatt_cache_manager.o(i.car_update_pending_handle) referenced from gatt_cache_manager.o(i.update_pending_flags_check)
 <LI><a href="#[43]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[42]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.main)
 <LI><a href="#[4e]">db_update_pending_handle</a> from gatt_cache_manager.o(i.db_update_pending_handle) referenced from gatt_cache_manager.o(i.update_pending_flags_check)
 <LI><a href="#[3c]">disconnect</a> from main.o(i.disconnect) referenced from main.o(i.ble_dfu_evt_handler)
 <LI><a href="#[3b]">dummy_evt_handler</a> from ble_dfu.o(i.dummy_evt_handler) referenced from ble_dfu.o(i.ble_dfu_buttonless_init)
 <LI><a href="#[5d]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[49]">fds_evt_handler</a> from peer_data_storage.o(i.fds_evt_handler) referenced from peer_data_storage.o(i.pds_init)
 <LI><a href="#[2]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[51]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[56]">gcm_pdb_evt_handler</a> from gatt_cache_manager.o(i.gcm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[55]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[36]">i2s_data_handler</a> from audioplay.o(i.i2s_data_handler) referenced from audioplay.o(i.I2sInit)
 <LI><a href="#[59]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[61]">internal_transaction_cb</a> from nrf_twi_mngr.o(i.internal_transaction_cb) referenced from nrf_twi_mngr.o(.constdata)
 <LI><a href="#[60]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[4d]">link_secure_pending_handle</a> from security_manager.o(i.link_secure_pending_handle) referenced from security_manager.o(i.sm_ble_evt_handler)
 <LI><a href="#[4d]">link_secure_pending_handle</a> from security_manager.o(i.link_secure_pending_handle) referenced from security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[32]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[67]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from main.o(sdh_ble_observers1)
 <LI><a href="#[6c]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[70]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[79]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[72]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[64]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[63]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[62]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[46]">nrf_pwr_mgmt_timeout_handler</a> from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_timeout_handler) referenced from nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init)
 <LI><a href="#[3f]">nrf_qwr_error_handler</a> from main.o(i.nrf_qwr_error_handler) referenced from main.o(i.main)
 <LI><a href="#[75]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[76]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[35]">nus_data_handler</a> from bleservice.o(i.nus_data_handler) referenced from bleservice.o(i.BleProtocalServiceInit)
 <LI><a href="#[3e]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.main)
 <LI><a href="#[41]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.main)
 <LI><a href="#[4c]">params_reply_pending_handle</a> from security_manager.o(i.params_reply_pending_handle) referenced from security_manager.o(i.sm_ble_evt_handler)
 <LI><a href="#[4c]">params_reply_pending_handle</a> from security_manager.o(i.params_reply_pending_handle) referenced from security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[52]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[4a]">pm_evt_handler</a> from main.o(i.pm_evt_handler) referenced from main.o(i.peer_manager_init)
 <LI><a href="#[0]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[1]">pm_gscm_evt_handler</a> from peer_manager.o(i.pm_gscm_evt_handler) referenced 2 times from gatts_cache_manager.o(.data)
 <LI><a href="#[50]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[53]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[58]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[5b]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5e]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[4b]">sc_send_pending_handle</a> from gatt_cache_manager.o(i.sc_send_pending_handle) referenced from gatt_cache_manager.o(i.service_changed_pending_flags_check)
 <LI><a href="#[78]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[45]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[54]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[57]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[71]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[48]">twi_event_handler</a> from nrf_twi_mngr.o(i.twi_event_handler) referenced from nrf_twi_mngr.o(i.nrf_twi_mngr_init)
 <LI><a href="#[48]">twi_event_handler</a> from nrf_twi_mngr.o(i.twi_event_handler) referenced from nrf_twi_mngr.o(i.start_pending_transaction)
 <LI><a href="#[44]">twim_evt_handler</a> from nrf_drv_twi.o(i.twim_evt_handler) referenced from nrf_drv_twi.o(i.nrf_drv_twi_init)
 <LI><a href="#[5a]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3a]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[5f]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5c]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[398]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[82]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[399]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[39a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[39b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[39c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[39d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7c]"></a>app_error_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_error_handler_keil.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestModelTimer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProtocalServiceInit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cOpBlocking
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[2c5]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[7d]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>

<P><STRONG><a name="[2c8]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[7e]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>

<P><STRONG><a name="[2c4]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[2d0]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[2cf]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[2cd]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[39e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2cc]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[2d2]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[39f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[3a0]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR64
</UL>

<P><STRONG><a name="[3a1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[143]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
</UL>

<P><STRONG><a name="[142]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
</UL>

<P><STRONG><a name="[3a2]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemInfo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneVehicleParam
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneParamToTable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuffParam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemParam
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadRead
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNodeToBleRequestCmdTable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockData
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_modes_config_set
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItIsASecret
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean_on_return
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[3a3]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3a5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_config_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_highest
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[3a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[186]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[be]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
</UL>

<P><STRONG><a name="[1c2]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[185]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3a8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>ActiveSystemParam</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, systemconfig.o(i.ActiveSystemParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ActiveSystemParam &rArr; Tas5719SetVolume &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719SetVolume
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalHalMaxSpeedCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
</UL>

<P><STRONG><a name="[86]"></a>ActiveVehicleParam</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mixerconfig.o(i.ActiveVehicleParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ActiveVehicleParam &rArr; GearBoxSpeedReset
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDecelerartion
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxSpeedReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
</UL>

<P><STRONG><a name="[126]"></a>AdcContinueModeInit</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, motorspeed.o(i.AdcContinueModeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdcContinueModeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[89]"></a>AddNodeToBleRequestCmdTable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bleservice.o(i.AddNodeToBleRequestCmdTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddNodeToBleRequestCmdTable &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
</UL>

<P><STRONG><a name="[8b]"></a>AllocOneFreeBlock</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, fs.o(i.AllocOneFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4284<LI>Call Chain = AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFreeBlock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
</UL>

<P><STRONG><a name="[8f]"></a>AmplifierControlHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mixer.o(i.AmplifierControlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = AmplifierControlHandler &rArr; AmplifierEnable &rArr; Tas5719Cmd &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnChipAudioIsPlaying
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>AmplifierDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mixer.o(i.AmplifierDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = AmplifierDisable &rArr; Tas5719Cmd &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
</UL>

<P><STRONG><a name="[91]"></a>AmplifierEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mixer.o(i.AmplifierEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = AmplifierEnable &rArr; Tas5719Cmd &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
</UL>

<P><STRONG><a name="[94]"></a>AnalyOneSoundIndex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mixer.o(i.AnalyOneSoundIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 5288<LI>Call Chain = AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
</UL>

<P><STRONG><a name="[97]"></a>AnalyzeDeviceConfig</STRONG> (Thumb, 46 bytes, Stack size 528 bytes, systemconfig.o(i.AnalyzeDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = AnalyzeDeviceConfig &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuffParam
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>AnalyzeEngineFile</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, engine.o(i.AnalyzeEngineFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopWorking
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelVarInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSystemError
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystmError
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
</UL>

<P><STRONG><a name="[95]"></a>AnalyzeMixerConfig</STRONG> (Thumb, 836 bytes, Stack size 4200 bytes, mixerconfig.o(i.AnalyzeMixerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4288<LI>Call Chain = AnalyzeMixerConfig &rArr; InitOneParam &rArr; CheckParamIndex &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDecelerartion
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRealVolume
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
</UL>

<P><STRONG><a name="[a2]"></a>AnalyzeSystemConfig</STRONG> (Thumb, 232 bytes, Stack size 560 bytes, systemconfig.o(i.AnalyzeSystemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = AnalyzeSystemConfig &rArr; InitOneParam &rArr; CheckParamIndex &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalHalMaxSpeedCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[294]"></a>AudioChannelGetDataInTimeInterruptWithSecure</STRONG> (Thumb, 240 bytes, Stack size 12 bytes, mixer.o(i.AudioChannelGetDataInTimeInterruptWithSecure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AudioChannelGetDataInTimeInterruptWithSecure
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_data_handler
</UL>

<P><STRONG><a name="[a5]"></a>AudioFileConvert</STRONG> (Thumb, 1126 bytes, Stack size 832 bytes, audiofileconvert.o(i.AudioFileConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 5428<LI>Call Chain = AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBadAudio
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryTeaKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAudioMp3Format
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChechAudioGuid
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
</UL>

<P><STRONG><a name="[b1]"></a>AudioFileReadHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mixer.o(i.AudioFileReadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff2Read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff1Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff0Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithStopFile
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartingHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
</UL>

<P><STRONG><a name="[b5]"></a>AudioOutHwConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mixer.o(i.AudioOutHwConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = AudioOutHwConfig &rArr; TAS5719_Init &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAS5719_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sInit
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[2b5]"></a>AudioOutVarInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, audioplay.o(i.AudioOutVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>AuthorizePassword</STRONG> (Thumb, 150 bytes, Stack size 176 bytes, password.o(i.AuthorizePassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = AuthorizePassword &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
</UL>

<P><STRONG><a name="[bf]"></a>BleAnalysisMessageId</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, bledatalayer.o(i.BleAnalysisMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 5484<LI>Call Chain = BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockDataCmdHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataLengthCmdHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPasswordCmdHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleDisconnectCmdHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleRxDataHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleRequestCmdTableHandler
</UL>

<P><STRONG><a name="[d7]"></a>BleDisconnectCmdHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bledatalayer.o(i.BleDisconnectCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BleDisconnectCmdHandler &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordInvalid
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[da]"></a>BleProtocalServiceInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleservice.o(i.BleProtocalServiceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = BleProtocalServiceInit &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>BleRequestCmdTableHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bleservice.o(i.BleRequestCmdTableHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5492<LI>Call Chain = BleRequestCmdTableHandler &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>BleRxDataHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bleservice.o(i.BleRxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5500<LI>Call Chain = BleRxDataHandler &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>BleSendErrorPacket</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bleerror.o(i.BleSendErrorPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataLengthCmdHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPasswordCmdHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[d9]"></a>BleSendOneFrame</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bleservice.o(i.BleSendOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataLengthCmdHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleDisconnectCmdHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>

<P><STRONG><a name="[8e]"></a>BlockErase</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, spiflash.o(i.BlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BlockErase &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartDownloader
</UL>

<P><STRONG><a name="[87]"></a>CalDecelerartion</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, engine.o(i.CalDecelerartion))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveVehicleParam
</UL>

<P><STRONG><a name="[e3]"></a>CalDistSpeed</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, motorspeed.o(i.CalDistSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CalDistSpeed &rArr; GetDistSpeedHal &rArr; expo
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistSpeedHal
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTurnVoltage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistSpeedWithoutGearBox
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>

<P><STRONG><a name="[85]"></a>CalHalMaxSpeedCalibrate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motorspeedhal.o(i.CalHalMaxSpeedCalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSystemParam
</UL>

<P><STRONG><a name="[a1]"></a>CalRealVolume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mixer.o(i.CalRealVolume))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
</UL>

<P><STRONG><a name="[e7]"></a>CalSpeedAndBrakeAndGearBoxHandler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, engine.o(i.CalSpeedAndBrakeAndGearBoxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CalSpeedAndBrakeAndGearBoxHandler &rArr; GetMotorRealSpeedWithoutGearbox &rArr; DoAccelerateWithMotorCurve
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVolumeSlopePercent
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorRealSpeedWithoutGearbox
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineHandler
</UL>

<P><STRONG><a name="[1c1]"></a>CalSum</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, param.o(i.CalSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalSum
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>

<P><STRONG><a name="[e9]"></a>CalVolumeSlopePercent</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, engine.o(i.CalVolumeSlopePercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalVolumeSlopePercent
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>

<P><STRONG><a name="[ea]"></a>CalibrationCheck</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calibrationmode.o(i.CalibrationCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CalibrationCheck &rArr; nrf_gpio_pin_read &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>CalibrationMode</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, calibrationmode.o(i.CalibrationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4224<LI>Call Chain = CalibrationMode &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipAudioPlay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719SetVolume
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalHalMaxSpeedCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>ChangeProgeramCmdHandler</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, bledatalayer.o(i.ChangeProgeramCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ChangeProgeramCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[a7]"></a>ChechAudioGuid</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, audiofileconvert.o(i.ChechAudioGuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 3516<LI>Call Chain = ChechAudioGuid &rArr; RSAPrivateDecrypt &rArr; rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[fe]"></a>CheckAllDataPositive</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, engine.o(i.CheckAllDataPositive))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[1a9]"></a>CheckBlockFree</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fs.o(i.CheckBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFreeBlock
</UL>

<P><STRONG><a name="[104]"></a>CheckEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spiflash.o(i.CheckEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
</UL>

<P><STRONG><a name="[f2]"></a>CheckFsInformation</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fs.o(i.CheckFsInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CheckFsInformation &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
</UL>

<P><STRONG><a name="[90]"></a>CheckOnChipAudioIsPlaying</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, onchipaudio.o(i.CheckOnChipAudioIsPlaying))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
</UL>

<P><STRONG><a name="[f3]"></a>CheckOneFileWhole</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fs.o(i.CheckOneFileWhole))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CheckOneFileWhole &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRecoverOneAudioFile
</UL>

<P><STRONG><a name="[15b]"></a>CheckParamBuff</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, param.o(i.CheckParamBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckParamBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuffParam
</UL>

<P><STRONG><a name="[f4]"></a>CheckParamIndex</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, param.o(i.CheckParamIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CheckParamIndex &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
</UL>

<P><STRONG><a name="[1b0]"></a>CheckPasswordValid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, password.o(i.CheckPasswordValid))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[f5]"></a>CheckSoundBlockData</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, downloader.o(i.CheckSoundBlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4292<LI>Call Chain = CheckSoundBlockData &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
</UL>

<P><STRONG><a name="[d0]"></a>CheckSoundBlockDataCmdHandler</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bledatalayer.o(i.CheckSoundBlockDataCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4324<LI>Call Chain = CheckSoundBlockDataCmdHandler &rArr; CheckSoundBlockData &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockData
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1b5]"></a>ClearAudioPlayBuff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, audioplay.o(i.ClearAudioPlayBuff))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
</UL>

<P><STRONG><a name="[9e]"></a>ClearSystemError</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, systemerror.o(i.ClearSystemError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearSystemError
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTheMostSeriousError
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[112]"></a>ConfuseWav_16bit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tea.o(i.ConfuseWav_16bit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[ab]"></a>CreateEmptyFile</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, fs.o(i.CreateEmptyFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4332<LI>Call Chain = CreateEmptyFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[138]"></a>CutAudioFileStartStop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, engine.o(i.CutAudioFileStartStop))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
</UL>

<P><STRONG><a name="[f8]"></a>CutAudioOneSpeed</STRONG> (Thumb, 212 bytes, Stack size 4640 bytes, engine.o(i.CutAudioOneSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossZero
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositiveCrossZero
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNegativeCrossZero
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinPositive
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxNegative
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTailPoint
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAllDataPositive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeconfuseWav_16bit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
</UL>

<P><STRONG><a name="[102]"></a>DataFlashDirectWriteData</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, spiflash.o(i.DataFlashDirectWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
</UL>

<P><STRONG><a name="[98]"></a>DataFlashReadData</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, spiflash.o(i.DataFlashReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneFileWhole
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFsInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCheck
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeDeviceConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAudioMp3Format
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
</UL>

<P><STRONG><a name="[8d]"></a>DataFlashWriteData</STRONG> (Thumb, 158 bytes, Stack size 4196 bytes, spiflash.o(i.DataFlashWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4268<LI>Call Chain = DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCheck
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockData
</UL>

<P><STRONG><a name="[106]"></a>DecodeOneFrame</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, mp3convert.o(i.DecodeOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = DecodeOneFrame &rArr; MP3Decode &rArr; xmp3fixpt_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetLastFrameInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[10b]"></a>DeconfuseMp3_16bit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tea.o(i.DeconfuseMp3_16bit))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndDeconfuse
</UL>

<P><STRONG><a name="[fa]"></a>DeconfuseWav_16bit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tea.o(i.DeconfuseWav_16bit))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[a6]"></a>DecryTeaKey</STRONG> (Thumb, 84 bytes, Stack size 272 bytes, decrydeskey.o(i.DecryTeaKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 3748<LI>Call Chain = DecryTeaKey &rArr; RSAPrivateDecrypt &rArr; rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[10a]"></a>DecryptAndDeconfuse</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, tea.o(i.DecryptAndDeconfuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DecryptAndDeconfuse &rArr; DecryptContent &rArr; decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeconfuseMp3_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAudioMp3Format
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[a8]"></a>DecryptContent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tea.o(i.DecryptContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DecryptContent &rArr; decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndDeconfuse
</UL>

<P><STRONG><a name="[ad]"></a>DecryptionConvertMp3</STRONG> (Thumb, 342 bytes, Stack size 288 bytes, mp3convert.o(i.DecryptionConvertMp3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4596<LI>Call Chain = DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMp3File
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Seek
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndDeconfuse
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfuseWav_16bit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[113]"></a>DeleteFile</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, fs.o(i.DeleteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4324<LI>Call Chain = DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRecoverOneAudioFile
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
</UL>

<P><STRONG><a name="[c2]"></a>DeleteSoundCmdHandler</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bledatalayer.o(i.DeleteSoundCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4356<LI>Call Chain = DeleteSoundCmdHandler &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[13c]"></a>DivCeil</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, downloader.o(i.DivCeil))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
</UL>

<P><STRONG><a name="[139]"></a>DoAccelerateWithMotorCurve</STRONG> (Thumb, 434 bytes, Stack size 28 bytes, motorspeed.o(i.DoAccelerateWithMotorCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DoAccelerateWithMotorCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorRealSpeedWithoutGearbox
</UL>

<P><STRONG><a name="[2bc]"></a>DownloaderInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, downloader.o(i.DownloaderInit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>EngineHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, engine.o(i.EngineHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EngineHandler &rArr; EngineStatusHandler &rArr; EngineStopingHandlerWithoutStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>EngineMixerChannelVarInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, engine.o(i.EngineMixerChannelVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EngineMixerChannelVarInit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[119]"></a>EngineOverloadHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, motorspeed.o(i.EngineOverloadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EngineOverloadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealSpeedOtherFilter
</UL>

<P><STRONG><a name="[11a]"></a>EngineStartHandler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, engine.o(i.EngineStartHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStartHandler &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[11d]"></a>EngineStartingHandler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, engine.o(i.EngineStartingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EngineStartingHandler &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[117]"></a>EngineStatusHandler</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, engine.o(i.EngineStatusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EngineStatusHandler &rArr; EngineStopingHandlerWithoutStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithoutStopFile
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithStopFile
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartingHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVolumeSlopePercent
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineHandler
</UL>

<P><STRONG><a name="[120]"></a>EngineStopHandlerWithStopFile</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, engine.o(i.EngineStopHandlerWithStopFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStopHandlerWithStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[121]"></a>EngineStopHandlerWithoutStopFile</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, engine.o(i.EngineStopHandlerWithoutStopFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EngineStopHandlerWithoutStopFile
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[9d]"></a>EngineStopWorking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, engine.o(i.EngineStopWorking))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[11e]"></a>EngineStopingHandlerWithStopFile</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, engine.o(i.EngineStopingHandlerWithStopFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EngineStopingHandlerWithStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMixer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[11f]"></a>EngineStopingHandlerWithoutStopFile</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, engine.o(i.EngineStopingHandlerWithoutStopFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStopingHandlerWithoutStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMixer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[123]"></a>EvMotorSpeedHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, motorspeed.o(i.EvMotorSpeedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = EvMotorSpeedHandler &rArr; nrf_gpio_pin_read &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>EvMotorSpeedHwInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motorspeed.o(i.EvMotorSpeedHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = EvMotorSpeedHwInit &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcContinueModeInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[101]"></a>FindTailPoint</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, engine.o(i.FindTailPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FindTailPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[105]"></a>FlashWriteCheck</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spiflash.o(i.FlashWriteCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
</UL>

<P><STRONG><a name="[128]"></a>FormatFs</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fs.o(i.FormatFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4292<LI>Call Chain = FormatFs &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
</UL>

<P><STRONG><a name="[cb]"></a>FormatFsCmdHandler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bledatalayer.o(i.FormatFsCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4396<LI>Call Chain = FormatFsCmdHandler &rArr; GetFsInfo &rArr; RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[13]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 354 bytes, Stack size 72 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>GearBoxInit</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, motorspeed.o(i.GearBoxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GearBoxInit &rArr; GearBoxSpeedReset
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxThrottlePositionReset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxSpeedReset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[88]"></a>GearBoxSpeedReset</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, motorspeed.o(i.GearBoxSpeedReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GearBoxSpeedReset
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveVehicleParam
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxInit
</UL>

<P><STRONG><a name="[134]"></a>GearBoxThrottlePositionReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motorspeed.o(i.GearBoxThrottlePositionReset))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxInit
</UL>

<P><STRONG><a name="[a9]"></a>GetAudioMp3Format</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mp3convert.o(i.GetAudioMp3Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetAudioMp3Format &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMp3File
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndDeconfuse
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[135]"></a>GetAuthorizeRSAPulbicKey</STRONG> (Thumb, 74 bytes, Stack size 1040 bytes, authorize.o(i.GetAuthorizeRSAPulbicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = GetAuthorizeRSAPulbicKey &rArr; GetRsaKeyContent
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaKeyContent
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bb]"></a>GetDeviceId</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, systeminfo.o(i.GetDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>GetDistSpeedHal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, motorspeedhal.o(i.GetDistSpeedHal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetDistSpeedHal &rArr; expo
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expo
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
</UL>

<P><STRONG><a name="[e6]"></a>GetDistSpeedWithoutGearBox</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, motorspeed.o(i.GetDistSpeedWithoutGearBox))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
</UL>

<P><STRONG><a name="[9b]"></a>GetEngineInfo</STRONG> (Thumb, 580 bytes, Stack size 544 bytes, engine.o(i.GetEngineInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioFileStartStop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[129]"></a>GetFsInfo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs.o(i.GetFsInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4364<LI>Call Chain = GetFsInfo &rArr; RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBadAudio
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFile
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
</UL>

<P><STRONG><a name="[17e]"></a>GetLastDownloadMessageTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, downloader.o(i.GetLastDownloadMessageTime))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[100]"></a>GetMaxNegative</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, engine.o(i.GetMaxNegative))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMaxNegative
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[165]"></a>GetMenuKey</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, key.o(i.GetMenuKey))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
</UL>

<P><STRONG><a name="[ff]"></a>GetMinPositive</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, engine.o(i.GetMinPositive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMinPositive
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[e8]"></a>GetMotorRealSpeedWithoutGearbox</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, motorspeed.o(i.GetMotorRealSpeedWithoutGearbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetMotorRealSpeedWithoutGearbox &rArr; DoAccelerateWithMotorCurve
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealSpeedOtherFilter
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAccelerateWithMotorCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>

<P><STRONG><a name="[fd]"></a>GetNegativeCrossZero</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, engine.o(i.GetNegativeCrossZero))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[13b]"></a>GetNextSoundBlockIndex</STRONG> (Thumb, 142 bytes, Stack size 280 bytes, downloader.o(i.GetNextSoundBlockIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GetNextSoundBlockIndex &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivCeil
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
</UL>

<P><STRONG><a name="[cf]"></a>GetNextSoundBlockIndexCmdHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bledatalayer.o(i.GetNextSoundBlockIndexCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GetNextSoundBlockIndexCmdHandler &rArr; GetNextSoundBlockIndex &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[13d]"></a>GetOnChipAudioData</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, onchipaudio.o(i.GetOnChipAudioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetOnChipAudioData
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_data_handler
</UL>

<P><STRONG><a name="[13e]"></a>GetOneSystemInfo</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, systeminfo.o(i.GetOneSystemInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetOneSystemInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
</UL>

<P><STRONG><a name="[13f]"></a>GetOneSystemParam</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, systemconfig.o(i.GetOneSystemParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetOneSystemParam &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
</UL>

<P><STRONG><a name="[140]"></a>GetOneVehicleParam</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, mixerconfig.o(i.GetOneVehicleParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetOneVehicleParam &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
</UL>

<P><STRONG><a name="[141]"></a>GetPasswordRandom</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, password.o(i.GetPasswordRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetPasswordRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
</UL>

<P><STRONG><a name="[fc]"></a>GetPositiveCrossZero</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, engine.o(i.GetPositiveCrossZero))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[d4]"></a>GetRandomCmdHandler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bledatalayer.o(i.GetRandomCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetRandomCmdHandler &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[136]"></a>GetRsaKeyContent</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, decrydeskey.o(i.GetRsaKeyContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetRsaKeyContent
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaPrivateKey
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAuthorizeRSAPulbicKey
</UL>

<P><STRONG><a name="[144]"></a>GetRsaPrivateKey</STRONG> (Thumb, 160 bytes, Stack size 1032 bytes, decrydeskey.o(i.GetRsaPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = GetRsaPrivateKey &rArr; GetRsaKeyContent
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaKeyContent
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>GetSystemTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, actiontick.o(i.GetSystemTime))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartingHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemInfo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleRequestCmdTableHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineOverloadHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnChipAudioData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockData
</UL>

<P><STRONG><a name="[f6]"></a>GetTheMostSeriousError</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, systemerror.o(i.GetTheMostSeriousError))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSystemError
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystmError
</UL>

<P><STRONG><a name="[e4]"></a>GetTurnVoltage</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, motorspeed.o(i.GetTurnVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
</UL>

<P><STRONG><a name="[38]"></a>HalSpeedTimerIntHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motorspeedhal.o(i.HalSpeedTimerIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> motorspeedhal.o(i.MotorSpeedHalHwInit)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, nrfx_i2s.o(i.I2S_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2S_IRQHandler &rArr; nrf_i2s_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_i2s_event_clear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_i2s_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>I2cInit</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, i2c.o(i.I2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = I2cInit &rArr; nrf_twi_mngr_init &rArr; nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAS5719_Init
</UL>

<P><STRONG><a name="[14d]"></a>I2cOpBlocking</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c.o(i.I2cOpBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAS5719_WriteReg
</UL>

<P><STRONG><a name="[b7]"></a>I2sInit</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, audioplay.o(i.I2sInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = I2sInit &rArr; nrfx_i2s_init &rArr; configure_pins &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
</UL>

<P><STRONG><a name="[180]"></a>I2sIntRestart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, audioplay.o(i.I2sIntRestart))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[1b4]"></a>I2sIntStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, audioplay.o(i.I2sIntStop))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
</UL>

<P><STRONG><a name="[153]"></a>InitAllPeriph</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systemhw.o(i.InitAllPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = InitAllPeriph &rArr; AudioOutHwConfig &rArr; TAS5719_Init &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHwInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestModelTimer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>InitBuffParam</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, param.o(i.InitBuffParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitBuffParam &rArr; CheckParamBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamBuff
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeDeviceConfig
</UL>

<P><STRONG><a name="[b0]"></a>InitFile</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, fs.o(i.InitFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[15c]"></a>InitFs</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs.o(i.InitFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4380<LI>Call Chain = InitFs &rArr; GetFsInfo &rArr; RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFsInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>InitOneParam</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, param.o(i.InitOneParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitOneParam &rArr; CheckParamIndex &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
</UL>

<P><STRONG><a name="[159]"></a>InitTestModelTimer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, testmodel.o(i.InitTestModelTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = InitTestModelTimer &rArr; nrfx_timer_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[17c]"></a>IsAudioDownloading</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, downloader.o(i.IsAudioDownloading))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[fb]"></a>IsCrossZero</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, engine.o(i.IsCrossZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsCrossZero
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[f0]"></a>IsPasswordPassed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, password.o(i.IsPasswordPassed))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockDataCmdHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataLengthCmdHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[160]"></a>ItIsASecret</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, systeminfo.o(i.ItIsASecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ItIsASecret &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>KeyHwInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, key.o(i.KeyHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = KeyHwInit &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[162]"></a>KeyStatusHandler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, key.o(i.KeyStatusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = KeyStatusHandler &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneKeyHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
</UL>

<P><STRONG><a name="[164]"></a>KeyTopLevelHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(i.KeyTopLevelHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5320<LI>Call Chain = KeyTopLevelHandler &rArr; TryChangeVehileIndexLoop &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinusVolume
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMenuKey
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>LoadVehicleCfgFromSoundFile</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, audiofileconvert.o(i.LoadVehicleCfgFromSoundFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4352<LI>Call Chain = LoadVehicleCfgFromSoundFile &rArr; AnalyzeMixerConfig &rArr; InitOneParam &rArr; CheckParamIndex &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[bc]"></a>MD5Final</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, md5c.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>

<P><STRONG><a name="[ba]"></a>MD5Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5c.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>

<P><STRONG><a name="[bb]"></a>MD5Update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, md5c.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>

<P><STRONG><a name="[108]"></a>MP3Decode</STRONG> (Thumb, 770 bytes, Stack size 64 bytes, mp3dec.o(i.MP3Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MP3Decode &rArr; xmp3fixpt_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackSideInfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackFrameHeader
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IMDCT
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DecodeHuffman
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_CheckPadBit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3ClearBadFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
</UL>

<P><STRONG><a name="[107]"></a>MP3FindSyncWord</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mp3dec.o(i.MP3FindSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MP3FindSyncWord
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
</UL>

<P><STRONG><a name="[109]"></a>MP3GetLastFrameInfo</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, mp3dec.o(i.MP3GetLastFrameInfo))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
</UL>

<P><STRONG><a name="[110]"></a>MP3InitDecoder</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mp3dec.o(i.MP3InitDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MP3InitDecoder &rArr; xmp3fixpt_AllocateBuffers
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_AllocateBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[2bd]"></a>MeasureOneCycleMinTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, testmodel.o(i.MeasureOneCycleMinTime))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>MinusVolume</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mixer.o(i.MinusVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200<LI>Call Chain = MinusVolume &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
</UL>

<P><STRONG><a name="[178]"></a>MixAudio</STRONG> (Thumb, 916 bytes, Stack size 36 bytes, engine.o(i.MixAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MixAudio &rArr; TryOpenAudioFile &rArr; OpenAudioFile
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryOpenAudioFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAudioFile
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
</UL>

<P><STRONG><a name="[17b]"></a>MixerBleTopLevelHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mixer.o(i.MixerBleTopLevelHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5328<LI>Call Chain = MixerBleTopLevelHandler &rArr; TryChangeVehileIndexLoop &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDonwload
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAudioDownloading
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sIntRestart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastDownloadMessageTime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>MixerChaneBuff0Read</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, mixer.o(i.MixerChaneBuff0Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MixerChaneBuff0Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>

<P><STRONG><a name="[b2]"></a>MixerChaneBuff1Read</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, mixer.o(i.MixerChaneBuff1Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MixerChaneBuff1Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>

<P><STRONG><a name="[b4]"></a>MixerChaneBuff2Read</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, mixer.o(i.MixerChaneBuff2Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>

<P><STRONG><a name="[15a]"></a>MotorSpeedHalHwInit</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, motorspeedhal.o(i.MotorSpeedHalHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MotorSpeedHalHwInit &rArr; nrfx_gpiote_in_init &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[39]"></a>MotorSpeedHalIrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motorspeedhal.o(i.MotorSpeedHalIrqHandler))
<BR>[Address Reference Count : 1]<UL><LI> motorspeedhal.o(i.MotorSpeedHalHwInit)
</UL>
<P><STRONG><a name="[183]"></a>Mp3HeadRead</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mp3convert.o(i.Mp3HeadRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mp3HeadRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Text
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[184]"></a>Mp3HeadSeek</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mp3convert.o(i.Mp3HeadSeek))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Text
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[10f]"></a>Mp3Read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mp3convert.o(i.Mp3Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Mp3Read &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[10e]"></a>Mp3Seek</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mp3convert.o(i.Mp3Seek))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[36f]"></a>NN_Add</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, nn.o(i.NN_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NN_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[193]"></a>NN_Assign</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nn.o(i.NN_Assign))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
</UL>

<P><STRONG><a name="[18b]"></a>NN_AssignZero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nn.o(i.NN_AssignZero))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[18f]"></a>NN_Cmp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nn.o(i.NN_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NN_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[36e]"></a>NN_Decode</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, nn.o(i.NN_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[189]"></a>NN_Digits</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nn.o(i.NN_Digits))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[188]"></a>NN_Div</STRONG> (Thumb, 530 bytes, Stack size 520 bytes, nn.o(i.NN_Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_RShift
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_LShift
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmult
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_DigitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
</UL>

<P><STRONG><a name="[370]"></a>NN_Encode</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, nn.o(i.NN_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[18c]"></a>NN_LShift</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, nn.o(i.NN_LShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_LShift
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[191]"></a>NN_Mod</STRONG> (Thumb, 26 bytes, Stack size 280 bytes, nn.o(i.NN_Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = NN_Mod &rArr; NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[192]"></a>NN_ModExp</STRONG> (Thumb, 200 bytes, Stack size 584 bytes, nn.o(i.NN_ModExp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692<LI>Call Chain = NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[194]"></a>NN_ModMult</STRONG> (Thumb, 36 bytes, Stack size 288 bytes, nn.o(i.NN_ModMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[195]"></a>NN_Mult</STRONG> (Thumb, 154 bytes, Stack size 328 bytes, nn.o(i.NN_Mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = NN_Mult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmult
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[190]"></a>NN_RShift</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, nn.o(i.NN_RShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_RShift
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[18e]"></a>NN_Sub</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nn.o(i.NN_Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NN_Sub
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[ee]"></a>OnChipAudioPlay</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, onchipaudio.o(i.OnChipAudioPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnChipAudioPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
</UL>

<P><STRONG><a name="[156]"></a>OnChipLedHwInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, onchipled.o(i.OnChipLedHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OnChipLedHwInit &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[17a]"></a>OpenAudioFile</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, engine.o(i.OpenAudioFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryOpenAudioFile
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
</UL>

<P><STRONG><a name="[118]"></a>OpenFile</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs.o(i.OpenFile))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithStopFile
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelVarInit
</UL>

<P><STRONG><a name="[10c]"></a>OpenMp3File</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mp3convert.o(i.OpenMp3File))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAudioMp3Format
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[d]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>PasswordAuthorizeCmdHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bledatalayer.o(i.PasswordAuthorizeCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PasswordAuthorizeCmdHandler &rArr; AuthorizePassword &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[f1]"></a>RSAPrivateDecrypt</STRONG> (Thumb, 124 bytes, Stack size 160 bytes, rsa.o(i.RSAPrivateDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3476<LI>Call Chain = RSAPrivateDecrypt &rArr; rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memcpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryTeaKey
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChechAudioGuid
</UL>

<P><STRONG><a name="[1e]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>R_memcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, r_stdlib.o(i.R_memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>

<P><STRONG><a name="[16a]"></a>R_memset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, r_stdlib.o(i.R_memset))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[f9]"></a>ReadFile</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fs.o(i.ReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff2Read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff1Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff0Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
</UL>

<P><STRONG><a name="[cc]"></a>ReadSoundGuidCmdHandler</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bledatalayer.o(i.ReadSoundGuidCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadSoundGuidCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[cd]"></a>ReadSoundNameCmdHandler</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, bledatalayer.o(i.ReadSoundNameCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadSoundNameCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[13a]"></a>RealSpeedOtherFilter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, motorspeed.o(i.RealSpeedOtherFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RealSpeedOtherFilter &rArr; EngineOverloadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineOverloadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorRealSpeedWithoutGearbox
</UL>

<P><STRONG><a name="[aa]"></a>RecoverBadAudio</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fs.o(i.RecoverBadAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 4348<LI>Call Chain = RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRecoverOneAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[19c]"></a>ResetPassword</STRONG> (Thumb, 182 bytes, Stack size 184 bytes, password.o(i.ResetPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = ResetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPasswordCmdHandler
</UL>

<P><STRONG><a name="[d6]"></a>ResetPasswordCmdHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bledatalayer.o(i.ResetPasswordCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4384<LI>Call Chain = ResetPasswordCmdHandler &rArr; ResetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[19d]"></a>RestartDownloader</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, downloader.o(i.RestartDownloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RestartDownloader &rArr; BlockErase &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
</UL>

<P><STRONG><a name="[1a0]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[1a2]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[11]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; twim_irq_handler &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_twim.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SearchFreeBlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fs.o(i.SearchFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SearchFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
</UL>

<P><STRONG><a name="[f7]"></a>SectorErase</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, spiflash.o(i.SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SectorErase &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
</UL>

<P><STRONG><a name="[d3]"></a>SelectVehicleCmdHandler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bledatalayer.o(i.SelectVehicleCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = SelectVehicleCmdHandler &rArr; TryChangeVehileRollBack &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[d2]"></a>SetDataLengthCmdHandler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bledatalayer.o(i.SetDataLengthCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetDataLengthCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDlPacketDataCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1ab]"></a>SetDlPacketDataCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, downloader.o(i.SetDlPacketDataCnt))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataLengthCmdHandler
</UL>

<P><STRONG><a name="[11c]"></a>SetMixerChannel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, engine.o(i.SetMixerChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SetMixerChannel &rArr; MixAudio &rArr; TryOpenAudioFile &rArr; OpenAudioFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerStatus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
</UL>

<P><STRONG><a name="[1ac]"></a>SetMixerStatus</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, engine.o(i.SetMixerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetMixerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
</UL>

<P><STRONG><a name="[1ad]"></a>SetOneSystemParam</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, systemconfig.o(i.SetOneSystemParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SetOneSystemParam &rArr; ActiveSystemParam &rArr; Tas5719SetVolume &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSystemParam
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
</UL>

<P><STRONG><a name="[1ae]"></a>SetOneVehicleParam</STRONG> (Thumb, 752 bytes, Stack size 64 bytes, mixerconfig.o(i.SetOneVehicleParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetOneVehicleParam &rArr; CheckParamIndex &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveVehicleParam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
</UL>

<P><STRONG><a name="[1af]"></a>SetPassword</STRONG> (Thumb, 134 bytes, Stack size 168 bytes, password.o(i.SetPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = SetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPasswordValid
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
</UL>

<P><STRONG><a name="[c4]"></a>SetPasswordCmdHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bledatalayer.o(i.SetPasswordCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = SetPasswordCmdHandler &rArr; SetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[d8]"></a>SetPasswordInvalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, password.o(i.SetPasswordInvalid))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleDisconnectCmdHandler
</UL>

<P><STRONG><a name="[9c]"></a>SetSystmError</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systemerror.o(i.SetSystmError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSystmError
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTheMostSeriousError
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[1b1]"></a>SoftwareDisableWriteProtoct</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, spiflash.o(i.SoftwareDisableWriteProtoct))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SoftwareDisableWriteProtoct &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[157]"></a>SpiFlashHwInit</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, spiflash.o(i.SpiFlashHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SpiFlashHwInit &rArr; SstReadId &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[103]"></a>SpiRead</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, spiflash.o(i.SpiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>

<P><STRONG><a name="[1b3]"></a>SpiReadWrite</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, spiflash.o(i.SpiReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
</UL>

<P><STRONG><a name="[e2]"></a>SpiWrite</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, spiflash.o(i.SpiWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>

<P><STRONG><a name="[1b2]"></a>SstReadId</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spiflash.o(i.SstReadId))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SstReadId &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[17d]"></a>StopAuidoPlay</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mixer.o(i.StopAuidoPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = StopAuidoPlay &rArr; AmplifierControlHandler &rArr; AmplifierEnable &rArr; Tas5719Cmd &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sIntStop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAudioPlayBuff
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[17f]"></a>StopDonwload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, downloader.o(i.StopDonwload))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[122]"></a>StopMixer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mixer.o(i.StopMixer))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, actiontick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SystemInfoRequestCmdHandler</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, bledatalayer.o(i.SystemInfoRequestCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemInfoRequestCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemInfo
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNodeToBleRequestCmdTable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[33]"></a>SystemInit</STRONG> (Thumb, 726 bytes, Stack size 20 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>SystemParamRequestCmdHandler</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, bledatalayer.o(i.SystemParamRequestCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemParamRequestCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemParam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNodeToBleRequestCmdTable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[c0]"></a>SystemParamSetCmdHandler</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, bledatalayer.o(i.SystemParamSetCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SystemParamSetCmdHandler &rArr; SetOneSystemParam &rArr; ActiveSystemParam &rArr; Tas5719SetVolume &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[c8]"></a>SystemParamStoreCmdHandler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bledatalayer.o(i.SystemParamStoreCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4224<LI>Call Chain = SystemParamStoreCmdHandler &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[154]"></a>SystickConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, actiontick.o(i.SystickConfig))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[b6]"></a>TAS5719_Init</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, tas5719.o(i.TAS5719_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = TAS5719_Init &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAS5719_WriteReg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
</UL>

<P><STRONG><a name="[1b6]"></a>TAS5719_WriteReg</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, tas5719.o(i.TAS5719_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cOpBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719Cmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAS5719_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719SetVolume
</UL>

<P><STRONG><a name="[16]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER2_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>Tas5719Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tas5719.o(i.Tas5719Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Tas5719Cmd &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAS5719_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierDisable
</UL>

<P><STRONG><a name="[84]"></a>Tas5719SetVolume</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tas5719.o(i.Tas5719SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Tas5719SetVolume &rArr; TAS5719_WriteReg &rArr; I2cOpBlocking &rArr; nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAS5719_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinusVolume
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSystemParam
</UL>

<P><STRONG><a name="[37]"></a>TestModelTimeIntHandlerNull</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, testmodel.o(i.TestModelTimeIntHandlerNull))
<BR>[Address Reference Count : 1]<UL><LI> testmodel.o(i.InitTestModelTimer)
</UL>
<P><STRONG><a name="[166]"></a>TryChangeVehileIndexLoop</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mixer.o(i.TryChangeVehileIndexLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 5312<LI>Call Chain = TryChangeVehileIndexLoop &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipAudioPlay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>TryChangeVehileRollBack</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mixer.o(i.TryChangeVehileRollBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 5312<LI>Call Chain = TryChangeVehileRollBack &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipAudioPlay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
</UL>

<P><STRONG><a name="[11b]"></a>TryCloseAudioFile</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, engine.o(i.TryCloseAudioFile))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
</UL>

<P><STRONG><a name="[179]"></a>TryOpenAudioFile</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, engine.o(i.TryOpenAudioFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TryOpenAudioFile &rArr; OpenAudioFile
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
</UL>

<P><STRONG><a name="[19b]"></a>TryRecoverOneAudioFile</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs.o(i.TryRecoverOneAudioFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4332<LI>Call Chain = TryRecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneFileWhole
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBadAudio
</UL>

<P><STRONG><a name="[f]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>VehicleParamRequestCmdHandler</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, bledatalayer.o(i.VehicleParamRequestCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VehicleParamRequestCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneVehicleParam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNodeToBleRequestCmdTable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[c1]"></a>VehicleParamSetCmdHandler</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, bledatalayer.o(i.VehicleParamSetCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VehicleParamSetCmdHandler &rArr; SetOneVehicleParam &rArr; CheckParamIndex &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[ca]"></a>VehicleParamStoreCmdHandler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bledatalayer.o(i.VehicleParamStoreCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4224<LI>Call Chain = VehicleParamStoreCmdHandler &rArr; WriteVehicleParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[e0]"></a>WaitFlashFree</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spiflash.o(i.WaitFlashFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>

<P><STRONG><a name="[e1]"></a>WriteEnable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, spiflash.o(i.WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteEnable &rArr; SpiWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>

<P><STRONG><a name="[ae]"></a>WriteFile</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs.o(i.WriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4292<LI>Call Chain = WriteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[ac]"></a>WriteFileWithAlloc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs.o(i.WriteFileWithAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4308<LI>Call Chain = WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[1bc]"></a>WriteOneParamToTable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i.WriteOneParamToTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteOneParamToTable &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>

<P><STRONG><a name="[1bd]"></a>WriteParamSector</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs.o(i.WriteParamSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>

<P><STRONG><a name="[1be]"></a>WriteSoundBlockData</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, downloader.o(i.WriteSoundBlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteSoundBlockData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockDataCmdHandler
</UL>

<P><STRONG><a name="[c5]"></a>WriteSoundBlockDataCmdHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bledatalayer.o(i.WriteSoundBlockDataCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteSoundBlockDataCmdHandler &rArr; WriteSoundBlockData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockData
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1bf]"></a>WriteSoundFinish</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, downloader.o(i.WriteSoundFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 5468<LI>Call Chain = WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
</UL>

<P><STRONG><a name="[d1]"></a>WriteSoundFinishCmdHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bledatalayer.o(i.WriteSoundFinishCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5484<LI>Call Chain = WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1c0]"></a>WriteSoundStart</STRONG> (Thumb, 246 bytes, Stack size 128 bytes, downloader.o(i.WriteSoundStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4396<LI>Call Chain = WriteSoundStart &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartDownloader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivCeil
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
</UL>

<P><STRONG><a name="[ce]"></a>WriteSoundStartCmdHandler</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, bledatalayer.o(i.WriteSoundStartCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4436<LI>Call Chain = WriteSoundStartCmdHandler &rArr; WriteSoundStart &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[ef]"></a>WriteSystemParamTable</STRONG> (Thumb, 176 bytes, Stack size 4112 bytes, systemconfig.o(i.WriteSystemParamTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4192<LI>Call Chain = WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneParamToTable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSum
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinusVolume
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
</UL>

<P><STRONG><a name="[168]"></a>WriteVehicleParamTable</STRONG> (Thumb, 554 bytes, Stack size 4112 bytes, mixerconfig.o(i.WriteVehicleParamTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4192<LI>Call Chain = WriteVehicleParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneParamToTable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSum
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
</UL>

<P><STRONG><a name="[3ab]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3ac]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c9]"></a>addr_compare</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1d2]"></a>ah</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[47]"></a>app_error_fault_handler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[1d7]"></a>app_error_save_and_stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[207]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[1d9]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1de]"></a>app_timer_start</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[1e3]"></a>app_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1df]"></a>app_util_critical_region_enter</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = app_util_critical_region_enter &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privilege_level_get
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[1e1]"></a>app_util_critical_region_exit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = app_util_critical_region_exit &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privilege_level_get
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[1b8]"></a>assert_nrf_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.assert_nrf_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_cccd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_schedule
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_end_signal
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>

<P><STRONG><a name="[1f5]"></a>blcm_link_ctx_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[1f7]"></a>ble_advdata_encode</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[1ff]"></a>ble_advdata_parse</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[200]"></a>ble_advdata_search</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[2b9]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>ble_advertising_init</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[202]"></a>ble_advertising_modes_config_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_modes_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_modes_config_set &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
</UL>

<P><STRONG><a name="[68]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[73]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[1d1]"></a>ble_advertising_start</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[206]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[209]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_encrypted
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[20b]"></a>ble_conn_state_for_each_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_for_each_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_for_each_connected &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
</UL>

<P><STRONG><a name="[20d]"></a>ble_conn_state_for_each_set_user_flag</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_for_each_set_user_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[20f]"></a>ble_conn_state_mitm_protected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_mitm_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_mitm_protected
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[210]"></a>ble_conn_state_role</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_role
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
</UL>

<P><STRONG><a name="[211]"></a>ble_conn_state_status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_status
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[212]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>

<P><STRONG><a name="[1d4]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_user_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
</UL>

<P><STRONG><a name="[1e8]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_pending_handle
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[208]"></a>ble_conn_state_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>

<P><STRONG><a name="[216]"></a>ble_dfu_buttonless_async_svci_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_async_svci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_dfu_buttonless_async_svci_init &rArr; nrf_dfu_svci_vector_table_unset &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>ble_dfu_buttonless_backend_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_backend_init))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[218]"></a>ble_dfu_buttonless_bootloader_start_finalize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ble_dfu.o(i.ble_dfu_buttonless_bootloader_start_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
</UL>

<P><STRONG><a name="[21a]"></a>ble_dfu_buttonless_bootloader_start_prepare</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_bootloader_start_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[21b]"></a>ble_dfu_buttonless_char_add</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_dfu_buttonless_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[21d]"></a>ble_dfu_buttonless_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_dfu.o(i.ble_dfu_buttonless_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_dfu_buttonless_init &rArr; ble_dfu_buttonless_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>ble_dfu_buttonless_on_ble_evt</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_dfu_buttonless_on_ble_evt &rArr; ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[221]"></a>ble_dfu_buttonless_on_ctrl_pt_write</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_ctrl_pt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>

<P><STRONG><a name="[74]"></a>ble_dfu_buttonless_on_sys_evt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_dfu_buttonless_on_sys_evt &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu_unbonded.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[222]"></a>ble_dfu_buttonless_resp_send</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_dfu.o(i.ble_dfu_buttonless_resp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dfu_buttonless_resp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_sys_evt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[df]"></a>ble_nus_data_send</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
</UL>

<P><STRONG><a name="[db]"></a>ble_nus_init</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_nus_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProtocalServiceInit
</UL>

<P><STRONG><a name="[6e]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleservice.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[220]"></a>ble_srv_is_indication_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_indication_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[226]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[235]"></a>bsp_btn_ble_sleep_mode_prepare</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.bsp_btn_ble_sleep_mode_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_btn_ble_sleep_mode_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[1cb]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[223]"></a>bsp_indication_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[236]"></a>bsp_wakeup_button_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.bsp_wakeup_button_enable))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
</UL>

<P><STRONG><a name="[2fd]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[21c]"></a>characteristic_add</STRONG> (Thumb, 400 bytes, Stack size 96 bytes, ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[2b4]"></a>clocks_start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.clocks_start))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>conn_handle_list_get</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = conn_handle_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[bd]"></a>decrypt</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, tea.o(i.decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
</UL>

<P><STRONG><a name="[137]"></a>expo</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, motorspeedhal.o(i.expo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = expo
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expou
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistSpeedHal
</UL>

<P><STRONG><a name="[25d]"></a>expou</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, motorspeedhal.o(i.expou))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expo
</UL>

<P><STRONG><a name="[262]"></a>fds_file_delete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[266]"></a>fds_gc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[267]"></a>fds_init</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[26d]"></a>fds_record_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[26e]"></a>fds_record_find</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[26f]"></a>fds_record_find_by_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[270]"></a>fds_record_find_in_file</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[352]"></a>fds_record_id_from_desc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[271]"></a>fds_record_open</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[272]"></a>fds_record_update</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[274]"></a>fds_record_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[275]"></a>fds_register</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fds.o(i.fds_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fds_register &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[22e]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = gcm_ble_evt_handler &rArr; store_car_value &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[51]"></a>gcm_im_evt_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>gcm_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gcm_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[56]"></a>gcm_pdb_evt_handler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gcm_pdb_evt_handler &rArr; nrf_mtx_unlock &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[286]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[367]"></a>gscm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[28f]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[290]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[55]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[28b]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[293]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gscm_service_changed_ind_send &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[295]"></a>im_address_resolve</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[296]"></a>im_ble_addr_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_ble_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[22c]"></a>im_ble_evt_handler</STRONG> (Thumb, 210 bytes, Stack size 88 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[25c]"></a>im_conn_handle_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im_conn_handle_get
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[1eb]"></a>im_find_duplicate_bonding_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, id_manager.o(i.im_find_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = im_find_duplicate_bonding_data &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[299]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
</UL>

<P><STRONG><a name="[29c]"></a>im_master_id_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>

<P><STRONG><a name="[29b]"></a>im_master_ids_compare</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[1ec]"></a>im_new_peer_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1f3]"></a>im_peer_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
</UL>

<P><STRONG><a name="[1ea]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[29e]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[29a]"></a>is_valid_irk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[ec]"></a>mDelay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, actiontick.o(i.mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCheck
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 438 bytes, Stack size 176 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5676<LI>Call Chain = main &rArr; BleRxDataHandler &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; SpiReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tas5719SetVolume
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureOneCycleMinTime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItIsASecret
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaPrivateKey
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceId
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAuthorizeRSAPulbicKey
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineHandler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloaderInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCheck
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleRxDataHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleRequestCmdTableHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProtocalServiceInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutVarInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeDeviceConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_start
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_config_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2c2]"></a>next_id_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[2c3]"></a>nrf_atfifo_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[26b]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[254]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[2c6]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>

<P><STRONG><a name="[2c7]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[255]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[215]"></a>nrf_atflags_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>

<P><STRONG><a name="[240]"></a>nrf_atflags_fetch_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_atflags.o(i.nrf_atflags_fetch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[213]"></a>nrf_atflags_find_and_set_flag</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrf_atflags.o(i.nrf_atflags_find_and_set_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[20a]"></a>nrf_atflags_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>

<P><STRONG><a name="[214]"></a>nrf_atflags_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2b1]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[2af]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[269]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[238]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[22a]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2ce]"></a>nrf_atomic_u32_fetch_add</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[2cb]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[2c9]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[24b]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[2ca]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[2d1]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[2d3]"></a>nrf_balloc_alloc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = nrf_balloc_alloc &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[2d4]"></a>nrf_balloc_free</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[2d5]"></a>nrf_balloc_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[2b8]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[224]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2ba]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[217]"></a>nrf_dfu_svci_vector_table_unset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_dfu_svci.o(i.nrf_dfu_svci_vector_table_unset))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_dfu_svci_vector_table_unset &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
</UL>

<P><STRONG><a name="[2dd]"></a>nrf_drv_clock_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[2e0]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; nrfx_clock_lfclk_stop &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[2e2]"></a>nrf_drv_twi_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[2e5]"></a>nrf_fprintf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[23b]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_fprintf_buffer_flush &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[2e6]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[283]"></a>nrf_fstorage_erase</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[26a]"></a>nrf_fstorage_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_fstorage_init &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[70]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[79]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[72]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[284]"></a>nrf_fstorage_write</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[2fc]"></a>nrf_log_backend_add</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[2f5]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[2f6]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[36a]"></a>nrf_log_color_id_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[2b3]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_default_backends_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 528 bytes, Stack size 88 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[300]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_log_frontend_hexdump &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[1cf]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_shutdown_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[1c6]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_evt_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[1c8]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[1f1]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[302]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_log_frontend_std_4 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
</UL>

<P><STRONG><a name="[1d8]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[2fa]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2b2]"></a>nrf_log_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c0]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[308]"></a>nrf_log_module_name_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[1d5]"></a>nrf_log_panic</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[2f9]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2fe]"></a>nrf_memobj_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[309]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[2f7]"></a>nrf_memobj_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[306]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[2fb]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2f8]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_memobj_read &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_memobj_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = nrf_memobj_write &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[2b6]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_pwr_mgmt_init &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30c]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[219]"></a>nrf_pwr_mgmt_shutdown</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonless_dfu_sdh_state_observer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_timeout_handler
</UL>

<P><STRONG><a name="[30e]"></a>nrf_queue_available_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_available_get), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>

<P><STRONG><a name="[310]"></a>nrf_queue_generic_pop</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_generic_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_queue_generic_pop &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[311]"></a>nrf_queue_is_empty</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_queue_is_empty &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[313]"></a>nrf_queue_is_full</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_queue_is_full &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[314]"></a>nrf_queue_push</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_queue_push &rArr; nrf_queue_is_full &rArr; nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_schedule
</UL>

<P><STRONG><a name="[30f]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_utilization_get), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_available_get
</UL>

<P><STRONG><a name="[307]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[316]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[233]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[234]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[319]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_sdh_disable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[232]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[1a8]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[29f]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2eb]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[30b]"></a>nrf_section_iter_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[318]"></a>nrf_section_iter_next</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[322]"></a>nrf_strerror_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[1c7]"></a>nrf_strerror_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[14c]"></a>nrf_twi_mngr_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_twi_mngr_init &rArr; nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
</UL>

<P><STRONG><a name="[14e]"></a>nrf_twi_mngr_perform</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = nrf_twi_mngr_perform &rArr; nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_schedule
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cOpBlocking
</UL>

<P><STRONG><a name="[324]"></a>nrf_twi_mngr_schedule</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nrf_twi_mngr.o(i.nrf_twi_mngr_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = nrf_twi_mngr_schedule &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_perform
</UL>

<P><STRONG><a name="[2df]"></a>nrfx_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_clock_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[2de]"></a>nrfx_clock_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_clock_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[2e1]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_clock_lfclk_stop &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[182]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[181]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrfx_gpiote_in_init &rArr; nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[155]"></a>nrfx_gpiote_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[14f]"></a>nrfx_i2s_init</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, nrfx_i2s.o(i.nrfx_i2s_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nrfx_i2s_init &rArr; configure_pins &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sInit
</UL>

<P><STRONG><a name="[150]"></a>nrfx_i2s_start</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, nrfx_i2s.o(i.nrfx_i2s_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_i2s_start &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_word_aligned
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_i2s_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sInit
</UL>

<P><STRONG><a name="[32e]"></a>nrfx_prs_acquire</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_prs_acquire &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[330]"></a>nrfx_prs_release</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_prs_release &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
</UL>

<P><STRONG><a name="[331]"></a>nrfx_timer_compare</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[15f]"></a>nrfx_timer_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrfx_timer.o(i.nrfx_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_timer_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestModelTimer
</UL>

<P><STRONG><a name="[15e]"></a>nrfx_timer_extended_compare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrfx_timer.o(i.nrfx_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestModelTimer
</UL>

<P><STRONG><a name="[15d]"></a>nrfx_timer_init</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrfx_timer_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestModelTimer
</UL>

<P><STRONG><a name="[332]"></a>nrfx_twim_disable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrfx_twim_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_twim_disable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
</UL>

<P><STRONG><a name="[323]"></a>nrfx_twim_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrfx_twim_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrfx_twim_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[2e4]"></a>nrfx_twim_init</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, nrfx_twim.o(i.nrfx_twim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfx_twim_init &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[333]"></a>nrfx_twim_uninit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrfx_twim_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfx_twim_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[334]"></a>nrfx_twim_xfer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrfx_twim.o(i.nrfx_twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
</UL>

<P><STRONG><a name="[33b]"></a>pdb_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, peer_database.o(i.pdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pdb_init &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[52]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pdb_pds_evt_handler &rArr; reattempt_previous_operations &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[28d]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[29d]"></a>pdb_peer_free</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[1e9]"></a>pdb_write_buf_get</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[291]"></a>pdb_write_buf_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
</UL>

<P><STRONG><a name="[1f0]"></a>pdb_write_buf_store</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[349]"></a>pds_init</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[34c]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[34e]"></a>pds_next_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[298]"></a>pds_peer_data_iterate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[297]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[23d]"></a>pds_peer_data_read</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[28e]"></a>pds_peer_data_store</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[1ee]"></a>pds_peer_id_allocate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[342]"></a>pds_peer_id_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[347]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
</UL>

<P><STRONG><a name="[34b]"></a>peer_id_allocate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[353]"></a>peer_id_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = peer_id_delete &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[261]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_free &rArr; release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[34d]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[34f]"></a>peer_id_get_next_used</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[34a]"></a>peer_id_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_init))
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[354]"></a>peer_id_is_allocated</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[356]"></a>peer_id_is_deleted</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[344]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[33d]"></a>pm_buffer_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[345]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_ptr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[35a]"></a>pm_buffer_release</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[1c4]"></a>pm_conn_sec_status_get</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, peer_manager.o(i.pm_conn_sec_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pm_conn_sec_status_get &rArr; ble_conn_state_status
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
</UL>

<P><STRONG><a name="[1c5]"></a>pm_conn_secure</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_manager.o(i.pm_conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
</UL>

<P><STRONG><a name="[0]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>pm_gscm_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_manager.o(i.pm_gscm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gscm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatts_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[35d]"></a>pm_handler_flash_clean</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, peer_manager_handler.o(i.pm_handler_flash_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = pm_handler_flash_clean &rArr; pm_peer_rank_highest &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean_on_return
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_highest
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean_on_return
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_highest
</UL>

<P><STRONG><a name="[363]"></a>pm_handler_flash_clean_on_return</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, peer_manager_handler.o(i.pm_handler_flash_clean_on_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = pm_handler_flash_clean_on_return &rArr;  pm_handler_flash_clean (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[35c]"></a>pm_handler_on_pm_evt</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, peer_manager_handler.o(i.pm_handler_on_pm_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_handler_on_pm_evt &rArr; conn_secure &rArr; _conn_secure &rArr; pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[364]"></a>pm_handler_pm_evt_log</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, peer_manager_handler.o(i.pm_handler_pm_evt_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pm_handler_pm_evt_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
</UL>

<P><STRONG><a name="[50]"></a>pm_im_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_im_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[357]"></a>pm_init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[53]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pm_pdb_evt_handler &rArr; rank_vars_update &rArr; pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[362]"></a>pm_peer_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_manager.o(i.pm_peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[35f]"></a>pm_peer_rank_highest</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, peer_manager.o(i.pm_peer_rank_highest))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pm_peer_rank_highest &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[361]"></a>pm_peer_ranks_get</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, peer_manager.o(i.pm_peer_ranks_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
</UL>

<P><STRONG><a name="[1d0]"></a>pm_peers_delete</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, peer_manager.o(i.pm_peers_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[359]"></a>pm_register</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[358]"></a>pm_sec_params_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[58]"></a>pm_sm_evt_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>privilege_level_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_util_platform.o(i.privilege_level_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[22d]"></a>sm_ble_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[365]"></a>sm_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, security_manager.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sm_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[35b]"></a>sm_link_secure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security_manager.o(i.sm_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
</UL>

<P><STRONG><a name="[54]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sm_pdb_evt_handler &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[369]"></a>sm_sec_params_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[57]"></a>sm_smd_evt_handler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sm_smd_evt_handler &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[376]"></a>smd_ble_evt_handler</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[366]"></a>smd_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = smd_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[2a7]"></a>smd_link_secure</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smd_link_secure &rArr; ble_conn_state_role
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[378]"></a>smd_params_reply</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[289]"></a>store_car_value</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.store_car_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = store_car_value &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[348]"></a>write_buf_store</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, peer_database.o(i.write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
</UL>

<P><STRONG><a name="[177]"></a>xmp3fixpt_AllocateBuffers</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, buffers.o(i.xmp3fixpt_AllocateBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xmp3fixpt_AllocateBuffers
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
</UL>

<P><STRONG><a name="[397]"></a>xmp3fixpt_CalcBitsUsed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bitstream.o(i.xmp3fixpt_CalcBitsUsed))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[170]"></a>xmp3fixpt_CheckPadBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bitstream.o(i.xmp3fixpt_CheckPadBit))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[173]"></a>xmp3fixpt_DecodeHuffman</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, huffman.o(i.xmp3fixpt_DecodeHuffman))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xmp3fixpt_DecodeHuffman &rArr; DecodeHuffmanPairs
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHuffmanQuads
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHuffmanPairs
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[388]"></a>xmp3fixpt_DequantChannel</STRONG> (Thumb, 482 bytes, Stack size 128 bytes, dqchan.o(i.xmp3fixpt_DequantChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xmp3fixpt_DequantChannel &rArr; DequantBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DequantBlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLZ
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[174]"></a>xmp3fixpt_Dequantize</STRONG> (Thumb, 492 bytes, Stack size 72 bytes, dequant.o(i.xmp3fixpt_Dequantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = xmp3fixpt_Dequantize &rArr; xmp3fixpt_DequantChannel &rArr; DequantBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_MidSideProc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG2
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG1
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DequantChannel
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLZ
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[38e]"></a>xmp3fixpt_FDCT32</STRONG> (Thumb, 1714 bytes, Stack size 112 bytes, dct32.o(i.xmp3fixpt_FDCT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xmp3fixpt_FDCT32
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
</UL>

<P><STRONG><a name="[1ba]"></a>xmp3fixpt_GetBits</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bitstream.o(i.xmp3fixpt_GetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xmp3fixpt_GetBits &rArr; RefillBitstreamCache
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefillBitstreamCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG2
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackSideInfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[175]"></a>xmp3fixpt_IMDCT</STRONG> (Thumb, 288 bytes, Stack size 104 bytes, imdct.o(i.xmp3fixpt_IMDCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = xmp3fixpt_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiAlias
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[38d]"></a>xmp3fixpt_IntensityProcMPEG1</STRONG> (Thumb, 564 bytes, Stack size 136 bytes, stproc.o(i.xmp3fixpt_IntensityProcMPEG1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xmp3fixpt_IntensityProcMPEG1
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[38b]"></a>xmp3fixpt_IntensityProcMPEG2</STRONG> (Thumb, 574 bytes, Stack size 200 bytes, stproc.o(i.xmp3fixpt_IntensityProcMPEG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xmp3fixpt_IntensityProcMPEG2
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[38a]"></a>xmp3fixpt_MidSideProc</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stproc.o(i.xmp3fixpt_MidSideProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xmp3fixpt_MidSideProc
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[393]"></a>xmp3fixpt_PolyphaseMono</STRONG> (Thumb, 646 bytes, Stack size 48 bytes, polyphase.o(i.xmp3fixpt_PolyphaseMono))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xmp3fixpt_PolyphaseMono
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR64
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipToShort
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
</UL>

<P><STRONG><a name="[395]"></a>xmp3fixpt_PolyphaseStereo</STRONG> (Thumb, 1588 bytes, Stack size 120 bytes, polyphase.o(i.xmp3fixpt_PolyphaseStereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xmp3fixpt_PolyphaseStereo
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR64
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipToShort
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
</UL>

<P><STRONG><a name="[396]"></a>xmp3fixpt_SetBitstreamPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bitstream.o(i.xmp3fixpt_SetBitstreamPointer))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackSideInfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[176]"></a>xmp3fixpt_Subband</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, subband.o(i.xmp3fixpt_Subband))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xmp3fixpt_Subband &rArr; xmp3fixpt_PolyphaseStereo
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseStereo
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseMono
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_FDCT32
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[16d]"></a>xmp3fixpt_UnpackFrameHeader</STRONG> (Thumb, 470 bytes, Stack size 20 bytes, bitstream.o(i.xmp3fixpt_UnpackFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xmp3fixpt_UnpackFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[172]"></a>xmp3fixpt_UnpackScaleFactors</STRONG> (Thumb, 246 bytes, Stack size 88 bytes, scalfact.o(i.xmp3fixpt_UnpackScaleFactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = xmp3fixpt_UnpackScaleFactors &rArr; UnpackSFMPEG2 &rArr; xmp3fixpt_GetBits &rArr; RefillBitstreamCache
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG2
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG1
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_SetBitstreamPointer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_CalcBitsUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[16e]"></a>xmp3fixpt_UnpackSideInfo</STRONG> (Thumb, 536 bytes, Stack size 56 bytes, bitstream.o(i.xmp3fixpt_UnpackSideInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = xmp3fixpt_UnpackSideInfo &rArr; xmp3fixpt_GetBits &rArr; RefillBitstreamCache
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_SetBitstreamPointer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1cc]"></a>advertising_config_get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.advertising_config_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = advertising_config_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
</UL>

<P><STRONG><a name="[1ce]"></a>advertising_start</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = advertising_start &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>app_shutdown_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.app_shutdown_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_shutdown_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(pwr_mgmt_data0)
</UL>
<P><STRONG><a name="[40]"></a>ble_dfu_evt_handler</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, main.o(i.ble_dfu_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_dfu_evt_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_connected
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_modes_config_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_config_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[6f]"></a>ble_evt_handler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, main.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[231]"></a>ble_stack_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>buttonless_dfu_sdh_state_observer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.buttonless_dfu_sdh_state_observer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = buttonless_dfu_sdh_state_observer &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[42]"></a>conn_params_error_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c]"></a>disconnect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = disconnect &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_dfu_evt_handler)
</UL>
<P><STRONG><a name="[27a]"></a>gap_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gap_params_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3e]"></a>on_adv_evt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = on_adv_evt &rArr; nrf_sdh_disable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[41]"></a>on_conn_params_evt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2b7]"></a>peer_manager_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, main.o(i.peer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = peer_manager_init &rArr; pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>pm_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pm_evt_handler &rArr; pm_handler_flash_clean &rArr; pm_peer_rank_highest &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.peer_manager_init)
</UL>
<P><STRONG><a name="[127]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motorspeed.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>

<P><STRONG><a name="[124]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motorspeed.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_gpio_pin_read &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHandler
</UL>

<P><STRONG><a name="[163]"></a>OneKeyHandler</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, key.o(i.OneKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OneKeyHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
</UL>

<P><STRONG><a name="[161]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, key.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHwInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
</UL>

<P><STRONG><a name="[196]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, onchipled.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHwInit
</UL>

<P><STRONG><a name="[36]"></a>i2s_data_handler</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, audioplay.o(i.i2s_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2s_data_handler &rArr; GetOnChipAudioData
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioChannelGetDataInTimeInterruptWithSecure
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnChipAudioData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audioplay.o(i.I2sInit)
</UL>
<P><STRONG><a name="[eb]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, calibrationmode.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_gpio_pin_read &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCheck
</UL>

<P><STRONG><a name="[1ca]"></a>advertising_buttons_configure</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[69]"></a>ble_evt_handler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_evt_handler &rArr; advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[1f8]"></a>ble_device_addr_encode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[1fb]"></a>conn_int_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[1fc]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[1fe]"></a>name_encode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[1fd]"></a>service_data_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[1f9]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[1fa]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[381]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[205]"></a>flags_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[203]"></a>phy_is_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[204]"></a>use_whitelist</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.use_whitelist))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[6a]"></a>ble_evt_handler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_evt_handler &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[229]"></a>conn_params_negotiation</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[225]"></a>instance_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[227]"></a>is_conn_params_ok</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[228]"></a>send_error_evt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3a]"></a>update_timeout_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[66]"></a>ble_evt_handler</STRONG> (Thumb, 258 bytes, Stack size 128 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[20c]"></a>for_each_set_flag</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_conn_state.o(i.for_each_set_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_connected
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[20e]"></a>user_flag_is_acquired</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[23e]"></a>set_security_req</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_srv_common.o(i.set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[3d]"></a>apply_pending_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.apply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = apply_pending_handle &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_ble_evt_handler)
</UL>
<P><STRONG><a name="[23c]"></a>car_update_needed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.car_update_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = car_update_needed &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[4f]"></a>car_update_pending_handle</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.car_update_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = car_update_pending_handle &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.update_pending_flags_check)
</UL>
<P><STRONG><a name="[4e]"></a>db_update_pending_handle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.db_update_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = db_update_pending_handle &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.update_pending_flags_check)
</UL>
<P><STRONG><a name="[25a]"></a>evt_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[1e6]"></a>local_db_apply_in_evt</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_handle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[287]"></a>local_db_update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.local_db_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = local_db_update &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[24c]"></a>local_db_update_in_evt</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
</UL>

<P><STRONG><a name="[24d]"></a>nrf_mtx_unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.nrf_mtx_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_mtx_unlock &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
</UL>

<P><STRONG><a name="[4b]"></a>sc_send_pending_handle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.sc_send_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = sc_send_pending_handle &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.service_changed_pending_flags_check)
</UL>
<P><STRONG><a name="[2ae]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[375]"></a>service_changed_cccd</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, gatt_cache_manager.o(i.service_changed_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = service_changed_cccd &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[28a]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = service_changed_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[371]"></a>service_changed_send_in_evt</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_cccd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
</UL>

<P><STRONG><a name="[288]"></a>update_pending_flags_check</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.update_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[25b]"></a>evt_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = evt_send &rArr; im_conn_handle_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>

<P><STRONG><a name="[292]"></a>service_changed_pending_set</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = service_changed_pending_set &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
</UL>

<P><STRONG><a name="[24a]"></a>data_length_update</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[2d6]"></a>link_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>

<P><STRONG><a name="[2d7]"></a>on_connected_evt</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = on_connected_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2da]"></a>on_data_length_update_evt</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = on_data_length_update_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2db]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2d9]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2d8]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = on_exchange_mtu_rsp_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2dc]"></a>user_mem_reply</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[49]"></a>fds_evt_handler</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fds_evt_handler &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_within_pm_range
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_init)
</UL>
<P><STRONG><a name="[25e]"></a>file_id_within_pm_range</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[25f]"></a>pds_evt_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[260]"></a>peer_data_delete_process</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, peer_data_storage.o(i.peer_data_delete_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[351]"></a>peer_data_find</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[350]"></a>peer_data_id_is_valid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[33f]"></a>pdb_evt_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[346]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[340]"></a>reattempt_previous_operations</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, peer_database.o(i.reattempt_previous_operations))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = reattempt_previous_operations &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[343]"></a>write_buffer_record_find</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[341]"></a>write_buffer_record_find_next</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[33c]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[33e]"></a>write_buffer_record_release</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[23f]"></a>claim</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[355]"></a>release</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[6b]"></a>ble_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peer_manager.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ble_evt_handler &rArr; sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[35e]"></a>evt_send</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gscm_evt_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[368]"></a>rank_vars_update</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peer_manager.o(i.rank_vars_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rank_vars_update &rArr; pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[1c3]"></a>_conn_secure</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, peer_manager_handler.o(i._conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _conn_secure &rArr; pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_secure
</UL>

<P><STRONG><a name="[249]"></a>conn_secure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peer_manager_handler.o(i.conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = conn_secure &rArr; _conn_secure &rArr; pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
</UL>

<P><STRONG><a name="[360]"></a>rank_highest</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, peer_manager_handler.o(i.rank_highest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = rank_highest &rArr;  pm_handler_flash_clean (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[2c1]"></a>mutex_lock_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pm_buffer.o(i.mutex_lock_status_get))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
</UL>

<P><STRONG><a name="[1d3]"></a>allow_repairing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, security_dispatcher.o(i.allow_repairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = allow_repairing &rArr; ble_conn_state_user_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1e7]"></a>auth_status_success_process</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_success_evt_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[248]"></a>conn_sec_failure</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, security_dispatcher.o(i.conn_sec_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_sec_failure &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>

<P><STRONG><a name="[253]"></a>encryption_failure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = encryption_failure &rArr; conn_sec_failure &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[1f4]"></a>evt_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_success_evt_send
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[276]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_dispatcher.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
</UL>

<P><STRONG><a name="[2a8]"></a>link_secure_failure</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = link_secure_failure &rArr; pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[2a9]"></a>pairing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, security_dispatcher.o(i.pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pairing &rArr; ble_conn_state_user_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[2aa]"></a>pairing_failure</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[1f2]"></a>pairing_success_evt_send</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, security_dispatcher.o(i.pairing_success_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pairing_success_evt_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[372]"></a>sec_info_request_process</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sec_info_request_process &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[374]"></a>sec_keyset_fill</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_keyset_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[373]"></a>sec_proc_start</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sec_proc_start &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[1ed]"></a>send_config_req</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_config_req &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1ef]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, security_dispatcher.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[258]"></a>events_send_from_err_code</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[259]"></a>evt_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security_manager.o(i.evt_send))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[277]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_manager.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[278]"></a>flags_set_from_err_code</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[2a4]"></a>link_secure</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>

<P><STRONG><a name="[4d]"></a>link_secure_pending_handle</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, security_manager.o(i.link_secure_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = link_secure_pending_handle &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Address Reference Count : 2]<UL><LI> security_manager.o(i.sm_ble_evt_handler)
<LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[2a5]"></a>new_context_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, security_manager.o(i.new_context_get))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[4c]"></a>params_reply_pending_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security_manager.o(i.params_reply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = params_reply_pending_handle &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>
<BR>[Address Reference Count : 2]<UL><LI> security_manager.o(i.sm_ble_evt_handler)
<LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[2a6]"></a>params_req_send</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, security_manager.o(i.params_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = params_req_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[377]"></a>sec_params_verify</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[33a]"></a>smd_params_reply_perform</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_handle
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[3b]"></a>dummy_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_dfu.o(i.dummy_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dummy_evt_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(i.ble_dfu_buttonless_init)
</UL>
<P><STRONG><a name="[21f]"></a>on_rw_authorize_req</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_dfu.o(i.on_rw_authorize_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_rw_authorize_req &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[241]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[43]"></a>clock_irq_handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[78]"></a>sd_state_evt_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; nrfx_clock_lfclk_stop &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[71]"></a>soc_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[197]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[326]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[32b]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[32a]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[130]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2ed]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[133]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_gpio_cfg_sense_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[2f3]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_gpio_pin_read &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[12e]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_gpio_ports_read &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[327]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[328]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[329]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[32f]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[2ee]"></a>nrf_gpio_cfg</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, nrfx_twim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[2f0]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
</UL>

<P><STRONG><a name="[37e]"></a>nrf_twim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[37f]"></a>nrf_twim_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_twim.o(i.nrf_twim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[380]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[1a6]"></a>twim_irq_handler</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, nrfx_twim.o(i.twim_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = twim_irq_handler &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[335]"></a>twim_xfer</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, nrfx_twim.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
</UL>

<P><STRONG><a name="[2f1]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_gpio_pin_clear &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[2f2]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[2f4]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_gpio_pin_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[37d]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[2e3]"></a>twi_clear_bus</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = twi_clear_bus &rArr; nrf_gpio_pin_set &rArr; nrf_gpio_pin_port_decode &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[44]"></a>twim_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(i.nrf_drv_twi_init)
</UL>
<P><STRONG><a name="[244]"></a>configure_pins</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, nrfx_i2s.o(i.configure_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = configure_pins &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_i2s_pins_set
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_init
</UL>

<P><STRONG><a name="[2ef]"></a>nrf_gpio_cfg</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, nrfx_i2s.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[245]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_i2s.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
</UL>

<P><STRONG><a name="[246]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_i2s.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
</UL>

<P><STRONG><a name="[149]"></a>nrf_i2s_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_i2s.o(i.nrf_i2s_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>nrf_i2s_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_i2s.o(i.nrf_i2s_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_i2s_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_start
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>nrf_i2s_pins_set</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, nrfx_i2s.o(i.nrf_i2s_pins_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_i2s_pins_set
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
</UL>

<P><STRONG><a name="[32c]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_i2s.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_start
</UL>

<P><STRONG><a name="[32d]"></a>nrfx_is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_i2s.o(i.nrfx_is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_i2s_start
</UL>

<P><STRONG><a name="[1b7]"></a>irq_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[2a3]"></a>nrf_timer_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[312]"></a>nrf_queue_next_idx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_queue_next_idx &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[315]"></a>queue_utilization_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[1db]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1dd]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1e2]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[1dc]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[242]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[37c]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[2ab]"></a>list_insertions_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[243]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
</UL>

<P><STRONG><a name="[1da]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1a7]"></a>timer_list_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[2ad]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[2ac]"></a>timer_list_remove</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[1e4]"></a>timer_stop_op_schedule</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[19a]"></a>timer_timeouts_check</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>user_op_alloc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[24e]"></a>delete_execute</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = delete_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[36c]"></a>event_prepare</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = event_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[268]"></a>event_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2]"></a>fs_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[27b]"></a>gc_execute</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[27d]"></a>gc_next_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[280]"></a>gc_page_erase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gc_page_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[27f]"></a>gc_record_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[27e]"></a>gc_record_find_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[27c]"></a>gc_state_advance</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gc_state_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[337]"></a>header_check</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.header_check))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[338]"></a>header_has_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[2a0]"></a>init_execute</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = init_execute &rArr; page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[36d]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[339]"></a>page_identify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[384]"></a>page_offsets_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[336]"></a>page_scan</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[281]"></a>page_tag_write_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[282]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[26c]"></a>pages_init</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[263]"></a>queue_buf_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_buf_get &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[264]"></a>queue_buf_store</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fds.o(i.queue_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_buf_store &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[279]"></a>queue_process</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[265]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[251]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[24f]"></a>record_find_by_desc</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[285]"></a>record_find_next</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[250]"></a>record_header_flag_dirty</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[273]"></a>write_enqueue</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[36b]"></a>write_execute</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = write_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[383]"></a>write_space_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[382]"></a>write_space_reserve</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[23a]"></a>buffer_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[2a1]"></a>int_print</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[2a2]"></a>unsigned_print</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[2ec]"></a>addr_is_aligned32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[2e8]"></a>addr_is_within_bounds</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[5d]"></a>erase</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>event_send</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[59]"></a>init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>is_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[2ea]"></a>queue_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2e9]"></a>queue_process</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[256]"></a>queue_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[5b]"></a>read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>rmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>wmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[2be]"></a>memobj_op</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = memobj_op &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[30a]"></a>nrf_mtx_unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_mtx_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_mtx_unlock &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[46]"></a>nrf_pwr_mgmt_timeout_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_pwr_mgmt_timeout_handler &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init)
</UL>
<P><STRONG><a name="[320]"></a>nrf_section_iter_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_section_iter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_section_iter_get &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[30d]"></a>shutdown_process</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.shutdown_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[321]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[61]"></a>internal_transaction_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_twi_mngr.o(i.internal_transaction_cb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_twi_mngr.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>start_pending_transaction</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, nrf_twi_mngr.o(i.start_pending_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_end_signal
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_mngr_schedule
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
</UL>

<P><STRONG><a name="[37a]"></a>start_transfer</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, nrf_twi_mngr.o(i.start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[37b]"></a>transaction_end_signal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_twi_mngr.o(i.transaction_end_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = transaction_end_signal &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_event_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>

<P><STRONG><a name="[48]"></a>twi_event_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_twi_mngr.o(i.twi_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = twi_event_handler &rArr; start_pending_transaction &rArr; start_transfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transaction_end_signal
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_transfer
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pending_transaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_twi_mngr.o(i.start_pending_transaction)
<LI> nrf_twi_mngr.o(i.nrf_twi_mngr_init)
</UL>
<P><STRONG><a name="[64]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>serial_tx</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[237]"></a>buf_prealloc</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[252]"></a>dropped_sat16_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[2b0]"></a>invalid_packets_omit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[239]"></a>log_skip</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = log_skip &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[2bf]"></a>module_idx_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[301]"></a>std_n</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
</UL>

<P><STRONG><a name="[305]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[303]"></a>prefix_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[1a1]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[1a3]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[1a5]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[1a4]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[379]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[31e]"></a>nrf_section_iter_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_section_iter_get &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[31a]"></a>sdh_request_observer_notify</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[31b]"></a>sdh_state_observer_notify</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[31c]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[31d]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[75]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 104 bytes, Stack size 528 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[317]"></a>nrf_section_iter_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_sdh_ble.o(i.nrf_section_iter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_section_iter_get &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
</UL>

<P><STRONG><a name="[76]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; nrf_section_iter_init &rArr; nrf_section_iter_item_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[31f]"></a>nrf_section_iter_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_sdh_soc.o(i.nrf_section_iter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_section_iter_get &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
</UL>

<P><STRONG><a name="[169]"></a>Encode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5c.o(i.Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[16b]"></a>MD5Transform</STRONG> (Thumb, 1682 bytes, Stack size 96 bytes, md5c.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[18a]"></a>NN_DigitBits</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nn.o(i.NN_DigitBits))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[18d]"></a>dmult</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, nn.o(i.dmult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dmult
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[199]"></a>rsaprivatefunc</STRONG> (Thumb, 484 bytes, Stack size 1624 bytes, rsa.o(i.rsaprivatefunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3316<LI>Call Chain = rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>

<P><STRONG><a name="[10d]"></a>Mp3ReadId3V2Tag</STRONG> (Thumb, 362 bytes, Stack size 112 bytes, mp3convert.o(i.Mp3ReadId3V2Tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Mp3ReadId3V2Tag &rArr; Mp3ReadId3V2Text &rArr; Mp3HeadRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadRead
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Text
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[187]"></a>Mp3ReadId3V2Text</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mp3convert.o(i.Mp3ReadId3V2Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mp3ReadId3V2Text &rArr; Mp3HeadRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[35]"></a>nus_data_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, bleservice.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nus_data_handler &rArr; nrf_log_frontend_hexdump &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr;  assert_nrf_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleservice.o(i.BleProtocalServiceInit)
</UL>
<P><STRONG><a name="[16f]"></a>MP3ClearBadFrame</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mp3dec.o(i.MP3ClearBadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MP3ClearBadFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[390]"></a>RefillBitstreamCache</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, bitstream.o(i.RefillBitstreamCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RefillBitstreamCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>

<P><STRONG><a name="[385]"></a>ClearBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buffers.o(i.ClearBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_AllocateBuffers
</UL>

<P><STRONG><a name="[38f]"></a>MULSHIFT32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dct32.o(i.MULSHIFT32))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_FDCT32
</UL>

<P><STRONG><a name="[38c]"></a>CLZ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dequant.o(i.CLZ))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[389]"></a>CLZ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dqchan.o(i.CLZ))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DequantChannel
</UL>

<P><STRONG><a name="[114]"></a>DequantBlock</STRONG> (Thumb, 376 bytes, Stack size 88 bytes, dqchan.o(i.DequantBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DequantBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DequantChannel
</UL>

<P><STRONG><a name="[115]"></a>MULSHIFT32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dqchan.o(i.MULSHIFT32))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DequantBlock
</UL>

<P><STRONG><a name="[386]"></a>DecodeHuffmanPairs</STRONG> (Thumb, 786 bytes, Stack size 48 bytes, huffman.o(i.DecodeHuffmanPairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DecodeHuffmanPairs
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DecodeHuffman
</UL>

<P><STRONG><a name="[387]"></a>DecodeHuffmanQuads</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, huffman.o(i.DecodeHuffmanQuads))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DecodeHuffmanQuads
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DecodeHuffman
</UL>

<P><STRONG><a name="[a3]"></a>AntiAlias</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, imdct.o(i.AntiAlias))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AntiAlias
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IMDCT
</UL>

<P><STRONG><a name="[12b]"></a>FASTABS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imdct.o(i.FASTABS))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
</UL>

<P><STRONG><a name="[12a]"></a>FreqInvertRescale</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, imdct.o(i.FreqInvertRescale))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreqInvertRescale
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
</UL>

<P><STRONG><a name="[145]"></a>HybridTransform</STRONG> (Thumb, 332 bytes, Stack size 128 bytes, imdct.o(i.HybridTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = HybridTransform &rArr; IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IMDCT
</UL>

<P><STRONG><a name="[147]"></a>IMDCT12x3</STRONG> (Thumb, 436 bytes, Stack size 208 bytes, imdct.o(i.IMDCT12x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IMDCT12x3 &rArr; imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[146]"></a>IMDCT36</STRONG> (Thumb, 468 bytes, Stack size 224 bytes, imdct.o(i.IMDCT36))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IMDCT36 &rArr; idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idct9
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[a4]"></a>MULSHIFT32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imdct.o(i.MULSHIFT32))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idct9
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiAlias
</UL>

<P><STRONG><a name="[148]"></a>WinPrevious</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, imdct.o(i.WinPrevious))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WinPrevious
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[152]"></a>idct9</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, imdct.o(i.idct9))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = idct9
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
</UL>

<P><STRONG><a name="[151]"></a>imdct12</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, imdct.o(i.imdct12))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = imdct12
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
</UL>

<P><STRONG><a name="[394]"></a>ClipToShort</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, polyphase.o(i.ClipToShort))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseStereo
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseMono
</UL>

<P><STRONG><a name="[19e]"></a>SAR64</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, polyphase.o(i.SAR64))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseStereo
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseMono
</UL>

<P><STRONG><a name="[1b9]"></a>UnpackSFMPEG1</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, scalfact.o(i.UnpackSFMPEG1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UnpackSFMPEG1 &rArr; xmp3fixpt_GetBits &rArr; RefillBitstreamCache
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[1bb]"></a>UnpackSFMPEG2</STRONG> (Thumb, 572 bytes, Stack size 88 bytes, scalfact.o(i.UnpackSFMPEG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UnpackSFMPEG2 &rArr; xmp3fixpt_GetBits &rArr; RefillBitstreamCache
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[392]"></a>FASTABS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stproc.o(i.FASTABS))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_MidSideProc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG2
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG1
</UL>

<P><STRONG><a name="[391]"></a>MULSHIFT32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stproc.o(i.MULSHIFT32))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG2
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG1
</UL>

<P><STRONG><a name="[22f]"></a>on_connect</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[230]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
