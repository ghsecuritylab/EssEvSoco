<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\EssEvAppSoco.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\EssEvAppSoco.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Oct 28 14:59:31 2019
<BR><P>
<H3>Maximum Stack Usage =       5512 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; BleAnalyzeTransportLayer &rArr; OneFrameCheckAndHandle &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[68]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from stm32f10x_it.o(i.ADC1_2_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from stm32f10x_it.o(i.ADC3_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[7]">BusFaultException</a> from stm32f10x_it.o(i.BusFaultException) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[22]">CAN_RX1_IRQHandler</a> from stm32f10x_it.o(i.CAN_RX1_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[23]">CAN_SCE_IRQHandler</a> from stm32f10x_it.o(i.CAN_SCE_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel1_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel2_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel3_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel4_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel5_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel6_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel7_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel1_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel2_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel3_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[a]">DebugMonitor</a> from stm32f10x_it.o(i.DebugMonitor) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from stm32f10x_it.o(i.EXTI1_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from stm32f10x_it.o(i.EXTI2_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from stm32f10x_it.o(i.EXTI3_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from stm32f10x_it.o(i.FLASH_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from stm32f10x_it.o(i.FSMC_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[5]">HardFaultException</a> from stm32f10x_it.o(i.HardFaultException) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(i.I2C1_ER_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(i.I2C1_EV_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(i.I2C2_ER_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(i.I2C2_EV_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[6]">MemManageException</a> from stm32f10x_it.o(i.MemManageException) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[4]">NMIException</a> from stm32f10x_it.o(i.NMIException) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from stm32f10x_it.o(i.PVD_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[b]">PendSVC</a> from stm32f10x_it.o(i.PendSVC) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from stm32f10x_it.o(i.RCC_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(i.RTCAlarm_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from stm32f10x_it.o(i.RTC_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from stm32f10x_vector.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from stm32f10x_it.o(i.SDIO_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from stm32f10x_it.o(i.SPI1_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from stm32f10x_it.o(i.SPI2_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from stm32f10x_it.o(i.SPI3_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[9]">SVCHandler</a> from stm32f10x_it.o(i.SVCHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[c]">SysTickHandler</a> from stm32f10x_it.o(i.SysTickHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from stm32f10x_it.o(i.TAMPER_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from stm32f10x_it.o(i.TIM1_BRK_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(i.TIM1_CC_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(i.TIM1_UP_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from stm32f10x_it.o(i.TIM4_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from stm32f10x_it.o(i.TIM5_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from stm32f10x_it.o(i.TIM6_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from stm32f10x_it.o(i.TIM7_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from stm32f10x_it.o(i.TIM8_BRK_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from stm32f10x_it.o(i.TIM8_CC_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from stm32f10x_it.o(i.TIM8_TRG_COM_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from stm32f10x_it.o(i.TIM8_UP_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from stm32f10x_it.o(i.UART4_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from stm32f10x_it.o(i.UART5_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from stm32f10x_it.o(i.USART3_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(i.USBWakeUp_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x_it.o(i.USB_HP_CAN_TX_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN_RX0_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[8]">UsageFaultException</a> from stm32f10x_it.o(i.UsageFaultException) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from stm32f10x_it.o(i.WWDG_IRQHandler) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[4a]">__main</a> from __main.o(!!!main) referenced from stm32f10x_vector.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1f1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1f2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[4f]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[200]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[201]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[202]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[203]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[204]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[205]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[206]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[207]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[208]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[20a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[20b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[20d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[20e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[20f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[210]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[51]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[211]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[55]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BleAnalyzeTransportLayer &rArr; OneFrameCheckAndHandle &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[212]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[69]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[58]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[213]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[14a]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_vector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_vector.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_lasr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR64
</UL>

<P><STRONG><a name="[214]"></a>_ll_sshift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[50]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[b3]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>

<P><STRONG><a name="[18b]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuffParam
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemParam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneParamToTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneVehicleParam
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadRead
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemInfo
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[5d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[215]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[5f]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[216]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItIsASecret
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
</UL>

<P><STRONG><a name="[64]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[63]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[18c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[21a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[221]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[222]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[52]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[57]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[226]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[227]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC1_2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[131]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[136]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[134]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[12f]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[130]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[133]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[137]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[135]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[12e]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[6a]"></a>ActiveSystemParam</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, systemconfig.o(i.ActiveSystemParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ActiveSystemParam
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalHalMaxSpeedCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
</UL>

<P><STRONG><a name="[6c]"></a>ActiveVehicleParam</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mixerconfig.o(i.ActiveVehicleParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ActiveVehicleParam
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDecelerartion
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxSpeedReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
</UL>

<P><STRONG><a name="[6f]"></a>AllocOneFreeBlock</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fs.o(i.AllocOneFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296<LI>Call Chain = AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
</UL>

<P><STRONG><a name="[74]"></a>AmplifierControlHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mixer.o(i.AmplifierControlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AmplifierControlHandler &rArr; AmplifierEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnChipAudioIsPlaying
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>AmplifierDisable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mixer.o(i.AmplifierDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AmplifierDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
</UL>

<P><STRONG><a name="[76]"></a>AmplifierEnable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mixer.o(i.AmplifierEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AmplifierEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
</UL>

<P><STRONG><a name="[7a]"></a>AnalyOneSoundIndex</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mixer.o(i.AnalyOneSoundIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 5288<LI>Call Chain = AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
</UL>

<P><STRONG><a name="[7d]"></a>AnalyzeDeviceConfig</STRONG> (Thumb, 48 bytes, Stack size 528 bytes, systemconfig.o(i.AnalyzeDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = AnalyzeDeviceConfig &rArr; InitBuffParam &rArr; CheckParamBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuffParam
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>AnalyzeEngineFile</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, engine.o(i.AnalyzeEngineFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystmError
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSystemError
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopWorking
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
</UL>

<P><STRONG><a name="[7b]"></a>AnalyzeMixerConfig</STRONG> (Thumb, 1086 bytes, Stack size 4168 bytes, mixerconfig.o(i.AnalyzeMixerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4256<LI>Call Chain = AnalyzeMixerConfig &rArr; InitOneParam &rArr; CheckParamIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRealVolume
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDecelerartion
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
</UL>

<P><STRONG><a name="[88]"></a>AnalyzeSystemConfig</STRONG> (Thumb, 250 bytes, Stack size 528 bytes, systemconfig.o(i.AnalyzeSystemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AnalyzeSystemConfig &rArr; InitOneParam &rArr; CheckParamIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalHalMaxSpeedCalibrate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>AudioChannelGetDataInTimeInterruptWithSecure</STRONG> (Thumb, 320 bytes, Stack size 12 bytes, mixer.o(i.AudioChannelGetDataInTimeInterruptWithSecure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AudioChannelGetDataInTimeInterruptWithSecure
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel1IntHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel0IntHandler
</UL>

<P><STRONG><a name="[8b]"></a>AudioFileConvert</STRONG> (Thumb, 1372 bytes, Stack size 816 bytes, audiofileconvert.o(i.AudioFileConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 5432 + Unknown Stack Size
<LI>Call Chain = AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBadAudio
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFile
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryTeaKey
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChechAudioGuid
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
</UL>

<P><STRONG><a name="[96]"></a>AudioFileReadHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, mixer.o(i.AudioFileReadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff2Read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff1Read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff0Read
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithStopFile
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartingHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
</UL>

<P><STRONG><a name="[9a]"></a>AudioOutDac</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mixer.o(i.AudioOutDac))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AudioOutDac
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentOnChipAudioData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineAudioData
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel1IntHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel0IntHandler
</UL>

<P><STRONG><a name="[9e]"></a>AudioOutHwConfig</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, mixer.o(i.AudioOutHwConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AudioOutHwConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_StructInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[aa]"></a>AudioOutTimerIntHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mixer.o(i.AudioOutTimerIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AudioOutTimerIntHandler &rArr; GetOnChipAudioData
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnChipAudioData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineAudioData
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>AuthorizePassword</STRONG> (Thumb, 168 bytes, Stack size 168 bytes, password.o(i.AuthorizePassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AuthorizePassword &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
</UL>

<P><STRONG><a name="[1b9]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBootData
</UL>

<P><STRONG><a name="[b4]"></a>BkpHwInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, systemhw.o(i.BkpHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BkpHwInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[b6]"></a>BleAnalysisMessageId</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, bledatalayer.o(i.BleAnalysisMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 5488 + Unknown Stack Size
<LI>Call Chain = BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockDataCmdHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPasswordCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleDisconnectCmdHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneFrameCheckAndHandle
</UL>

<P><STRONG><a name="[ce]"></a>BleAnalyzeTransportLayer</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, bletransportlayer.o(i.BleAnalyzeTransportLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512 + Unknown Stack Size
<LI>Call Chain = BleAnalyzeTransportLayer &rArr; OneFrameCheckAndHandle &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneFrameCheckAndHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>BleComEnable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, blecomhw.o(i.BleComEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BleComEnable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComHwInit
</UL>

<P><STRONG><a name="[d3]"></a>BleComHwInit</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, blecomhw.o(i.BleComHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BleComHwInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[d7]"></a>BleComIntHandler</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, blecomhw.o(i.BleComIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BleComIntHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>BleComSendData</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, blecomhw.o(i.BleComSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
</UL>

<P><STRONG><a name="[cd]"></a>BleDisconnectCmdHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bledatalayer.o(i.BleDisconnectCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BleDisconnectCmdHandler &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordInvalid
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[dd]"></a>BleSendErrorPacket</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, bleerror.o(i.BleSendErrorPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPasswordCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[dc]"></a>BleSendOneFrame</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, bletransportlayer.o(i.BleSendOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordAuthorizeCmdHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleDisconnectCmdHandler
</UL>

<P><STRONG><a name="[73]"></a>BlockErase</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spiflash.o(i.BlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BlockErase &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartDownloader
</UL>

<P><STRONG><a name="[7]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_SCE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CalDecelerartion</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, engine.o(i.CalDecelerartion))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveVehicleParam
</UL>

<P><STRONG><a name="[e1]"></a>CalDistSpeed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motorspeed.o(i.CalDistSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CalDistSpeed &rArr; GetDistSpeedHal &rArr; expo &rArr; expou
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistSpeedHal
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTurnVoltage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistSpeedWithoutGearBox
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>

<P><STRONG><a name="[6b]"></a>CalHalMaxSpeedCalibrate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, motorspeedhal.o(i.CalHalMaxSpeedCalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSystemParam
</UL>

<P><STRONG><a name="[87]"></a>CalRealVolume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mixer.o(i.CalRealVolume))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
</UL>

<P><STRONG><a name="[e5]"></a>CalSpeedAndBrakeAndGearBoxHandler</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, engine.o(i.CalSpeedAndBrakeAndGearBoxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalSpeedAndBrakeAndGearBoxHandler &rArr; GetMotorRealSpeedWithoutGearbox &rArr; DoAccelerateWithMotorCurve
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorRealSpeedWithoutGearbox
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVolumeSlopePercent
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineHandler
</UL>

<P><STRONG><a name="[1d2]"></a>CalSum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, param.o(i.CalSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalSum
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>

<P><STRONG><a name="[e7]"></a>CalVolumeSlopePercent</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, engine.o(i.CalVolumeSlopePercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalVolumeSlopePercent
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>

<P><STRONG><a name="[e8]"></a>CalibrationCheck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, calibrationmode.o(i.CalibrationCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalibrationCheck &rArr; mDelay &rArr; KeyStatusHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>CalibrationMode</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, calibrationmode.o(i.CalibrationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4192 + Unknown Stack Size
<LI>Call Chain = CalibrationMode &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipAudioPlay
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalHalMaxSpeedCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>ChangeProgeramCmdHandler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, bledatalayer.o(i.ChangeProgeramCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ChangeProgeramCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBootData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[8d]"></a>ChechAudioGuid</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, audiofileconvert.o(i.ChechAudioGuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 3612<LI>Call Chain = ChechAudioGuid &rArr; RSAPrivateDecrypt &rArr; rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[fe]"></a>CheckAllDataPositive</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, engine.o(i.CheckAllDataPositive))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[1b7]"></a>CheckBlockFree</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, fs.o(i.CheckBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFreeBlock
</UL>

<P><STRONG><a name="[107]"></a>CheckEmpty</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spiflash.o(i.CheckEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
</UL>

<P><STRONG><a name="[f2]"></a>CheckFsInformation</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs.o(i.CheckFsInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckFsInformation &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
</UL>

<P><STRONG><a name="[75]"></a>CheckOnChipAudioIsPlaying</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, onchipaudio.o(i.CheckOnChipAudioIsPlaying))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipAudioPlay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnChipAudioData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
</UL>

<P><STRONG><a name="[f3]"></a>CheckOneFileWhole</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fs.o(i.CheckOneFileWhole))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CheckOneFileWhole &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRecoverOneAudioFile
</UL>

<P><STRONG><a name="[15c]"></a>CheckParamBuff</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, param.o(i.CheckParamBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckParamBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuffParam
</UL>

<P><STRONG><a name="[f4]"></a>CheckParamIndex</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, param.o(i.CheckParamIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CheckParamIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneParam
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
</UL>

<P><STRONG><a name="[1be]"></a>CheckPasswordValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, password.o(i.CheckPasswordValid))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[f5]"></a>CheckSoundBlockData</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, downloader.o(i.CheckSoundBlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4312<LI>Call Chain = CheckSoundBlockData &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
</UL>

<P><STRONG><a name="[c5]"></a>CheckSoundBlockDataCmdHandler</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, bledatalayer.o(i.CheckSoundBlockDataCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = CheckSoundBlockDataCmdHandler &rArr; CheckSoundBlockData &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[106]"></a>ClearSpiRxFifo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spiflash.o(i.ClearSpiRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
</UL>

<P><STRONG><a name="[84]"></a>ClearSystemError</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, systemerror.o(i.ClearSystemError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearSystemError
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTheMostSeriousError
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[114]"></a>ConfuseWav_16bit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tea.o(i.ConfuseWav_16bit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[90]"></a>CreateEmptyFile</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs.o(i.CreateEmptyFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4320<LI>Call Chain = CreateEmptyFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[140]"></a>CutAudioFileStartStop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, engine.o(i.CutAudioFileStartStop))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
</UL>

<P><STRONG><a name="[f8]"></a>CutAudioOneSpeed</STRONG> (Thumb, 216 bytes, Stack size 4632 bytes, engine.o(i.CutAudioOneSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeconfuseWav_16bit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossZero
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositiveCrossZero
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNegativeCrossZero
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinPositive
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxNegative
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTailPoint
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAllDataPositive
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
</UL>

<P><STRONG><a name="[a9]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
</UL>

<P><STRONG><a name="[a8]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
</UL>

<P><STRONG><a name="[9d]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_SetChannel2Data))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutTimerIntHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutDac
</UL>

<P><STRONG><a name="[a7]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
</UL>

<P><STRONG><a name="[103]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[12b]"></a>DMA_DeInit</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[104]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
</UL>

<P><STRONG><a name="[12d]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[12c]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[102]"></a>DataFlashDirectWriteData</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, spiflash.o(i.DataFlashDirectWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
</UL>

<P><STRONG><a name="[7e]"></a>DataFlashReadData</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, spiflash.o(i.DataFlashReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSpiRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeDeviceConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFile
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneFileWhole
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFsInformation
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCheck
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Read
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[72]"></a>DataFlashWriteData</STRONG> (Thumb, 166 bytes, Stack size 4200 bytes, spiflash.o(i.DataFlashWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteCheck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[a]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMonitor))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>DecodeOneFrame</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, mp3convert.o(i.DecodeOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = DecodeOneFrame &rArr; MP3Decode &rArr; xmp3fixpt_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3GetLastFrameInfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[10e]"></a>DeconfuseMp3_16bit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tea.o(i.DeconfuseMp3_16bit))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndDeconfuse
</UL>

<P><STRONG><a name="[fa]"></a>DeconfuseWav_16bit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tea.o(i.DeconfuseWav_16bit))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[8c]"></a>DecryTeaKey</STRONG> (Thumb, 118 bytes, Stack size 288 bytes, decrydeskey.o(i.DecryTeaKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 3852<LI>Call Chain = DecryTeaKey &rArr; RSAPrivateDecrypt &rArr; rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[10d]"></a>DecryptAndDeconfuse</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, tea.o(i.DecryptAndDeconfuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DecryptAndDeconfuse &rArr; DecryptContent &rArr; decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeconfuseMp3_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[8e]"></a>DecryptContent</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, tea.o(i.DecryptContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DecryptContent &rArr; decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndDeconfuse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[92]"></a>DecryptionConvertMp3</STRONG> (Thumb, 396 bytes, Stack size 280 bytes, mp3convert.o(i.DecryptionConvertMp3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616 + Unknown Stack Size
<LI>Call Chain = DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFileWithAlloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndDeconfuse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfuseWav_16bit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMp3File
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Seek
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[115]"></a>DeleteFile</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, fs.o(i.DeleteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4320<LI>Call Chain = DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverOneAudioFile
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
</UL>

<P><STRONG><a name="[c7]"></a>DeleteSoundCmdHandler</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, bledatalayer.o(i.DeleteSoundCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4368<LI>Call Chain = DeleteSoundCmdHandler &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[145]"></a>DivCeil</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, downloader.o(i.DivCeil))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
</UL>

<P><STRONG><a name="[141]"></a>DoAccelerateWithMotorCurve</STRONG> (Thumb, 988 bytes, Stack size 32 bytes, motorspeed.o(i.DoAccelerateWithMotorCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DoAccelerateWithMotorCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorRealSpeedWithoutGearbox
</UL>

<P><STRONG><a name="[1d5]"></a>DownloaderInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, downloader.o(i.DownloaderInit))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; MotorSpeedHalIrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[188]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalIrqHandler
</UL>

<P><STRONG><a name="[187]"></a>EXTI_Init</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[119]"></a>EngineHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, engine.o(i.EngineHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EngineHandler &rArr; EngineStatusHandler &rArr; EngineStopingHandlerWithoutStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>EngineMixerChannelInit</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, engine.o(i.EngineMixerChannelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EngineMixerChannelInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[80]"></a>EngineMixerChannelVarInit</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, engine.o(i.EngineMixerChannelVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EngineMixerChannelVarInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[11e]"></a>EngineOverloadHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, motorspeed.o(i.EngineOverloadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EngineOverloadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealSpeedOtherFilter
</UL>

<P><STRONG><a name="[11f]"></a>EngineStartHandler</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, engine.o(i.EngineStartHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStartHandler &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[122]"></a>EngineStartingHandler</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, engine.o(i.EngineStartingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStartingHandler &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[11a]"></a>EngineStatusHandler</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, engine.o(i.EngineStatusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EngineStatusHandler &rArr; EngineStopingHandlerWithoutStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithoutStopFile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithStopFile
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartingHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVolumeSlopePercent
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineHandler
</UL>

<P><STRONG><a name="[126]"></a>EngineStopHandlerWithStopFile</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, engine.o(i.EngineStopHandlerWithStopFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStopHandlerWithStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[125]"></a>EngineStopHandlerWithoutStopFile</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, engine.o(i.EngineStopHandlerWithoutStopFile))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[83]"></a>EngineStopWorking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, engine.o(i.EngineStopWorking))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[124]"></a>EngineStopingHandlerWithStopFile</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, engine.o(i.EngineStopingHandlerWithStopFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStopingHandlerWithStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMixer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[123]"></a>EngineStopingHandlerWithoutStopFile</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, engine.o(i.EngineStopingHandlerWithoutStopFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EngineStopingHandlerWithoutStopFile &rArr; AudioFileReadHandler &rArr; MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMixer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
</UL>

<P><STRONG><a name="[128]"></a>EvMotorSpeedHandler</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, motorspeed.o(i.EvMotorSpeedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvMotorSpeedHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>EvMotorSpeedHwInit</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, motorspeed.o(i.EvMotorSpeedHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvMotorSpeedHwInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1a6]"></a>FLASH_SetLatency</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FSMC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>FindTailPoint</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, engine.o(i.FindTailPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindTailPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[108]"></a>FlashWriteCheck</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spiflash.o(i.FlashWriteCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
</UL>

<P><STRONG><a name="[138]"></a>FormatFs</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, fs.o(i.FormatFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4304<LI>Call Chain = FormatFs &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
</UL>

<P><STRONG><a name="[bf]"></a>FormatFsCmdHandler</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bledatalayer.o(i.FormatFsCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4392<LI>Call Chain = FormatFsCmdHandler &rArr; GetFsInfo &rArr; RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; RecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[186]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHwInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHwInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[d4]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComHwInit
</UL>

<P><STRONG><a name="[e9]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCheck
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
</UL>

<P><STRONG><a name="[78]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierDisable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
</UL>

<P><STRONG><a name="[79]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHwInit
</UL>

<P><STRONG><a name="[85]"></a>GearBoxInit</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, motorspeed.o(i.GearBoxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GearBoxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxThrottlePositionReset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxSpeedReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[6e]"></a>GearBoxSpeedReset</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, motorspeed.o(i.GearBoxSpeedReset))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveVehicleParam
</UL>

<P><STRONG><a name="[13c]"></a>GearBoxThrottlePositionReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motorspeed.o(i.GearBoxThrottlePositionReset))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GearBoxInit
</UL>

<P><STRONG><a name="[13d]"></a>GetAuthorizeRSAPulbicKey</STRONG> (Thumb, 72 bytes, Stack size 1040 bytes, authorize.o(i.GetAuthorizeRSAPulbicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = GetAuthorizeRSAPulbicKey &rArr; GetRsaKeyContent
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaKeyContent
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>GetCurrentOnChipAudioData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, onchipaudio.o(i.GetCurrentOnChipAudioData))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutDac
</UL>

<P><STRONG><a name="[1d4]"></a>GetDeviceId</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, systeminfo.o(i.GetDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>GetDistSpeedHal</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, motorspeedhal.o(i.GetDistSpeedHal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetDistSpeedHal &rArr; expo &rArr; expou
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expo
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
</UL>

<P><STRONG><a name="[e3]"></a>GetDistSpeedWithoutGearBox</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, motorspeed.o(i.GetDistSpeedWithoutGearBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDistSpeedWithoutGearBox
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
</UL>

<P><STRONG><a name="[9b]"></a>GetEngineAudioData</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, engine.o(i.GetEngineAudioData))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutTimerIntHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutDac
</UL>

<P><STRONG><a name="[81]"></a>GetEngineInfo</STRONG> (Thumb, 934 bytes, Stack size 536 bytes, engine.o(i.GetEngineInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 5256<LI>Call Chain = GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioFileStartStop
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[139]"></a>GetFsInfo</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fs.o(i.GetFsInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = GetFsInfo &rArr; RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; RecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBadAudio
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFile
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
</UL>

<P><STRONG><a name="[17f]"></a>GetLastDownloadMessageTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, downloader.o(i.GetLastDownloadMessageTime))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[100]"></a>GetMaxNegative</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, engine.o(i.GetMaxNegative))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMaxNegative
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[165]"></a>GetMenuKey</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, key.o(i.GetMenuKey))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
</UL>

<P><STRONG><a name="[ff]"></a>GetMinPositive</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, engine.o(i.GetMinPositive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMinPositive
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[e6]"></a>GetMotorRealSpeedWithoutGearbox</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, motorspeed.o(i.GetMotorRealSpeedWithoutGearbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetMotorRealSpeedWithoutGearbox &rArr; DoAccelerateWithMotorCurve
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealSpeedOtherFilter
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAccelerateWithMotorCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
</UL>

<P><STRONG><a name="[fd]"></a>GetNegativeCrossZero</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, engine.o(i.GetNegativeCrossZero))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[143]"></a>GetNextSoundBlockIndex</STRONG> (Thumb, 190 bytes, Stack size 272 bytes, downloader.o(i.GetNextSoundBlockIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GetNextSoundBlockIndex &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivCeil
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
</UL>

<P><STRONG><a name="[c3]"></a>GetNextSoundBlockIndexCmdHandler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bledatalayer.o(i.GetNextSoundBlockIndexCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GetNextSoundBlockIndexCmdHandler &rArr; GetNextSoundBlockIndex &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[ac]"></a>GetOnChipAudioData</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, onchipaudio.o(i.GetOnChipAudioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetOnChipAudioData
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnChipAudioIsPlaying
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutTimerIntHandler
</UL>

<P><STRONG><a name="[146]"></a>GetOneSystemInfo</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, systeminfo.o(i.GetOneSystemInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetOneSystemInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInfoRequestCmdHandler
</UL>

<P><STRONG><a name="[147]"></a>GetOneSystemParam</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, systemconfig.o(i.GetOneSystemParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetOneSystemParam
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
</UL>

<P><STRONG><a name="[148]"></a>GetOneVehicleParam</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, mixerconfig.o(i.GetOneVehicleParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetOneVehicleParam
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
</UL>

<P><STRONG><a name="[149]"></a>GetPasswordRandom</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, password.o(i.GetPasswordRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetPasswordRandom &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomCmdHandler
</UL>

<P><STRONG><a name="[fc]"></a>GetPositiveCrossZero</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, engine.o(i.GetPositiveCrossZero))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[c9]"></a>GetRandomCmdHandler</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, bledatalayer.o(i.GetRandomCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GetRandomCmdHandler &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[13e]"></a>GetRsaKeyContent</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, decrydeskey.o(i.GetRsaKeyContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetRsaKeyContent
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaPrivateKey
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAuthorizeRSAPulbicKey
</UL>

<P><STRONG><a name="[14b]"></a>GetRsaPrivateKey</STRONG> (Thumb, 158 bytes, Stack size 1036 bytes, decrydeskey.o(i.GetRsaPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = GetRsaPrivateKey &rArr; GetRsaKeyContent
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaKeyContent
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>GetSystemTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, actiontick.o(i.GetSystemTime))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnChipAudioData
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHandler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartingHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSpeedAndBrakeAndGearBoxHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineOverloadHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordRandom
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockData
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemInfo
</UL>

<P><STRONG><a name="[f6]"></a>GetTheMostSeriousError</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, systemerror.o(i.GetTheMostSeriousError))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystmError
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSystemError
</UL>

<P><STRONG><a name="[e2]"></a>GetTurnVoltage</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motorspeed.o(i.GetTurnVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDistSpeed
</UL>

<P><STRONG><a name="[14c]"></a>HalSpeedTimerIntHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, motorspeedhal.o(i.HalSpeedTimerIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HalSpeedTimerIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgInit
</UL>

<P><STRONG><a name="[70]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgInit
</UL>

<P><STRONG><a name="[15f]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgInit
</UL>

<P><STRONG><a name="[160]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgInit
</UL>

<P><STRONG><a name="[15e]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgInit
</UL>

<P><STRONG><a name="[153]"></a>InitAllPeriph</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, systemhw.o(i.InitAllPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InitAllPeriph &rArr; SpiFlashHwInit &rArr; SstReadId &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHwInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTickConfiguration
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItIsASecret
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComHwInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBootData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvicConfiguration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkpHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHwInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>InitBuffParam</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, param.o(i.InitBuffParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitBuffParam &rArr; CheckParamBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamBuff
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeDeviceConfig
</UL>

<P><STRONG><a name="[95]"></a>InitFile</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, fs.o(i.InitFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[15d]"></a>InitFs</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fs.o(i.InitFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4384<LI>Call Chain = InitFs &rArr; GetFsInfo &rArr; RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; RecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFsInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>InitOneParam</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, param.o(i.InitOneParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitOneParam &rArr; CheckParamIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
</UL>

<P><STRONG><a name="[17e]"></a>IsAudioDownloading</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, downloader.o(i.IsAudioDownloading))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[fb]"></a>IsCrossZero</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, engine.o(i.IsCrossZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsCrossZero
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
</UL>

<P><STRONG><a name="[ee]"></a>IsPasswordPassed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, password.o(i.IsPasswordPassed))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockDataCmdHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamRequestCmdHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundNameCmdHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoundGuidCmdHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndexCmdHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFsCmdHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSoundCmdHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundBlockDataCmdHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[156]"></a>ItIsASecret</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, systeminfo.o(i.ItIsASecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ItIsASecret &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[f0]"></a>IwdgInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systemhw.o(i.IwdgInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IwdgInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[15a]"></a>KeyHwInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, key.o(i.KeyHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyHwInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[162]"></a>KeyStatusHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, key.o(i.KeyStatusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyStatusHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneKeyHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>

<P><STRONG><a name="[164]"></a>KeyTopLevelHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, key.o(i.KeyTopLevelHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344 + Unknown Stack Size
<LI>Call Chain = KeyTopLevelHandler &rArr; TryChangeVehileIndexLoop &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinusVolume
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMenuKey
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>LoadVehicleCfgFromSoundFile</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, audiofileconvert.o(i.LoadVehicleCfgFromSoundFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4320 + Unknown Stack Size
<LI>Call Chain = LoadVehicleCfgFromSoundFile &rArr; AnalyzeMixerConfig &rArr; InitOneParam &rArr; CheckParamIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeMixerConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[b1]"></a>MD5Final</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, md5c.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>

<P><STRONG><a name="[af]"></a>MD5Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5c.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>

<P><STRONG><a name="[b0]"></a>MD5Update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, md5c.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MD5Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>

<P><STRONG><a name="[10b]"></a>MP3Decode</STRONG> (Thumb, 804 bytes, Stack size 88 bytes, mp3dec.o(i.MP3Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = MP3Decode &rArr; xmp3fixpt_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackSideInfo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackFrameHeader
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IMDCT
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DecodeHuffman
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_CheckPadBit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindFreeSync
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3ClearBadFrame
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
</UL>

<P><STRONG><a name="[10a]"></a>MP3FindSyncWord</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mp3dec.o(i.MP3FindSyncWord))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindFreeSync
</UL>

<P><STRONG><a name="[10c]"></a>MP3GetLastFrameInfo</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mp3dec.o(i.MP3GetLastFrameInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MP3GetLastFrameInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeOneFrame
</UL>

<P><STRONG><a name="[113]"></a>MP3InitDecoder</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mp3dec.o(i.MP3InitDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MP3InitDecoder &rArr; xmp3fixpt_AllocateBuffers &rArr; ClearBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_AllocateBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[6]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManageException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>MinusVolume</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mixer.o(i.MinusVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = MinusVolume &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
</UL>

<P><STRONG><a name="[17a]"></a>MixAudio</STRONG> (Thumb, 2180 bytes, Stack size 12 bytes, engine.o(i.MixAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MixAudio &rArr; TryOpenAudioFile
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryOpenAudioFile
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryCloseAudioFile
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
</UL>

<P><STRONG><a name="[17d]"></a>MixerBleTopLevelHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mixer.o(i.MixerBleTopLevelHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344 + Unknown Stack Size
<LI>Call Chain = MixerBleTopLevelHandler &rArr; TryChangeVehileIndexLoop &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDonwload
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAudioDownloading
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastDownloadMessageTime
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAudioPlay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>MixerChaneBuff0Read</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mixer.o(i.MixerChaneBuff0Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MixerChaneBuff0Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>

<P><STRONG><a name="[98]"></a>MixerChaneBuff1Read</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mixer.o(i.MixerChaneBuff1Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MixerChaneBuff1Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>

<P><STRONG><a name="[99]"></a>MixerChaneBuff2Read</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mixer.o(i.MixerChaneBuff2Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MixerChaneBuff2Read &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileReadHandler
</UL>

<P><STRONG><a name="[183]"></a>MixerChannel0IntHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, engine.o(i.MixerChannel0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MixerChannel0IntHandler &rArr; AudioOutDac
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutDac
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioChannelGetDataInTimeInterruptWithSecure
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>MixerChannel1IntHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, engine.o(i.MixerChannel1IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MixerChannel1IntHandler &rArr; AudioOutDac
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutDac
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioChannelGetDataInTimeInterruptWithSecure
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>MotorSpeedHalHwInit</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, motorspeedhal.o(i.MotorSpeedHalHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorSpeedHalHwInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[118]"></a>MotorSpeedHalIrqHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motorspeedhal.o(i.MotorSpeedHalIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorSpeedHalIrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>Mp3HeadRead</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mp3convert.o(i.Mp3HeadRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mp3HeadRead
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Text
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[18a]"></a>Mp3HeadSeek</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mp3convert.o(i.Mp3HeadSeek))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Text
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[112]"></a>Mp3Read</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mp3convert.o(i.Mp3Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Mp3Read &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[111]"></a>Mp3Seek</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mp3convert.o(i.Mp3Seek))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[4]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMIException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1d7]"></a>NN_Add</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, nn.o(i.NN_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[199]"></a>NN_Assign</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nn.o(i.NN_Assign))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
</UL>

<P><STRONG><a name="[191]"></a>NN_AssignZero</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nn.o(i.NN_AssignZero))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[195]"></a>NN_Cmp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nn.o(i.NN_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NN_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[1d6]"></a>NN_Decode</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, nn.o(i.NN_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[18f]"></a>NN_Digits</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nn.o(i.NN_Digits))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[18e]"></a>NN_Div</STRONG> (Thumb, 636 bytes, Stack size 488 bytes, nn.o(i.NN_Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_RShift
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_LShift
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdigitmult
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_DigitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
</UL>

<P><STRONG><a name="[1d8]"></a>NN_Encode</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, nn.o(i.NN_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[192]"></a>NN_LShift</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, nn.o(i.NN_LShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_LShift
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[197]"></a>NN_Mod</STRONG> (Thumb, 40 bytes, Stack size 296 bytes, nn.o(i.NN_Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = NN_Mod &rArr; NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
</UL>

<P><STRONG><a name="[198]"></a>NN_ModExp</STRONG> (Thumb, 216 bytes, Stack size 592 bytes, nn.o(i.NN_ModExp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1756<LI>Call Chain = NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
</UL>

<P><STRONG><a name="[19a]"></a>NN_ModMult</STRONG> (Thumb, 48 bytes, Stack size 296 bytes, nn.o(i.NN_ModMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164<LI>Call Chain = NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
</UL>

<P><STRONG><a name="[19b]"></a>NN_Mult</STRONG> (Thumb, 186 bytes, Stack size 328 bytes, nn.o(i.NN_Mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = NN_Mult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmult
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
</UL>

<P><STRONG><a name="[196]"></a>NN_RShift</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, nn.o(i.NN_RShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_RShift
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[194]"></a>NN_Sub</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, nn.o(i.NN_Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NN_Sub
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[a6]"></a>NVIC_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComEnable
</UL>

<P><STRONG><a name="[19e]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvicConfiguration
</UL>

<P><STRONG><a name="[19d]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvicConfiguration
</UL>

<P><STRONG><a name="[155]"></a>NvicConfiguration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, systemhw.o(i.NvicConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NvicConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[ec]"></a>OnChipAudioPlay</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, onchipaudio.o(i.OnChipAudioPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnChipAudioPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnChipAudioIsPlaying
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
</UL>

<P><STRONG><a name="[19f]"></a>OnChipLedHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, onchipled.o(i.OnChipLedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnChipLedHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>OnChipLedHwInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, onchipled.o(i.OnChipLedHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OnChipLedHwInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[cf]"></a>OneFrameCheckAndHandle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bletransportlayer.o(i.OneFrameCheckAndHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 5504 + Unknown Stack Size
<LI>Call Chain = OneFrameCheckAndHandle &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalyzeTransportLayer
</UL>

<P><STRONG><a name="[17b]"></a>OpenAudioFile</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, engine.o(i.OpenAudioFile))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryOpenAudioFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
</UL>

<P><STRONG><a name="[11d]"></a>OpenFile</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs.o(i.OpenFile))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopHandlerWithStopFile
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelVarInit
</UL>

<P><STRONG><a name="[10f]"></a>OpenMp3File</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mp3convert.o(i.OpenMp3File))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkpHwInit
</UL>

<P><STRONG><a name="[ca]"></a>PasswordAuthorizeCmdHandler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bledatalayer.o(i.PasswordAuthorizeCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = PasswordAuthorizeCmdHandler &rArr; AuthorizePassword &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[b]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSVC))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[9f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComHwInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkpHwInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[a0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHwInit
</UL>

<P><STRONG><a name="[1a0]"></a>RCC_Configuration_HSI</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, systemhw.o(i.RCC_Configuration_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Configuration_HSI &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
</UL>

<P><STRONG><a name="[1a1]"></a>RCC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1b0]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
</UL>

<P><STRONG><a name="[1a4]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1ad]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1a7]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1a2]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1a3]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1a8]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1ab]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1aa]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1ac]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>

<P><STRONG><a name="[1ae]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccConfiguration
</UL>

<P><STRONG><a name="[f1]"></a>RSAPrivateDecrypt</STRONG> (Thumb, 180 bytes, Stack size 176 bytes, rsa.o(i.RSAPrivateDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3564<LI>Call Chain = RSAPrivateDecrypt &rArr; rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryTeaKey
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChechAudioGuid
</UL>

<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTCAlarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>R_memcpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r_stdlib.o(i.R_memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>

<P><STRONG><a name="[16a]"></a>R_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, r_stdlib.o(i.R_memset))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaprivatefunc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[154]"></a>RccConfiguration</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, systemhw.o(i.RccConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RccConfiguration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[f9]"></a>ReadFile</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, fs.o(i.ReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff2Read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff1Read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChaneBuff0Read
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEngineInfo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutAudioOneSpeed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
</UL>

<P><STRONG><a name="[c0]"></a>ReadSoundGuidCmdHandler</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, bledatalayer.o(i.ReadSoundGuidCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = ReadSoundGuidCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[c1]"></a>ReadSoundNameCmdHandler</STRONG> (Thumb, 272 bytes, Stack size 104 bytes, bledatalayer.o(i.ReadSoundNameCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ReadSoundNameCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[142]"></a>RealSpeedOtherFilter</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motorspeed.o(i.RealSpeedOtherFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RealSpeedOtherFilter &rArr; EngineOverloadHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineOverloadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorRealSpeedWithoutGearbox
</UL>

<P><STRONG><a name="[8f]"></a>RecoverBadAudio</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fs.o(i.RecoverBadAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 4352<LI>Call Chain = RecoverBadAudio &rArr; TryRecoverOneAudioFile &rArr; RecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRecoverOneAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFsInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[1b2]"></a>RecoverOneAudioFile</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fs.o(i.RecoverOneAudioFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = RecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRecoverOneAudioFile
</UL>

<P><STRONG><a name="[1b3]"></a>ResetPassword</STRONG> (Thumb, 178 bytes, Stack size 184 bytes, password.o(i.ResetPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 4352 + Unknown Stack Size
<LI>Call Chain = ResetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPasswordCmdHandler
</UL>

<P><STRONG><a name="[cc]"></a>ResetPasswordCmdHandler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bledatalayer.o(i.ResetPasswordCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376 + Unknown Stack Size
<LI>Call Chain = ResetPasswordCmdHandler &rArr; ResetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1b4]"></a>RestartDownloader</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, downloader.o(i.RestartDownloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RestartDownloader &rArr; BlockErase &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
</UL>

<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SDIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1c2]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[1c1]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[1d9]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[1db]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[1da]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[1c0]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[9]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SearchFreeBlock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs.o(i.SearchFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SearchFreeBlock &rArr; CheckBlockFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
</UL>

<P><STRONG><a name="[f7]"></a>SectorErase</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spiflash.o(i.SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SectorErase &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyFile
</UL>

<P><STRONG><a name="[c8]"></a>SelectVehicleCmdHandler</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, bledatalayer.o(i.SelectVehicleCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5368 + Unknown Stack Size
<LI>Call Chain = SelectVehicleCmdHandler &rArr; TryChangeVehileRollBack &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[ef]"></a>SetBootData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, systemhw.o(i.SetBootData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetBootData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[121]"></a>SetMixerChannel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, engine.o(i.SetMixerChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetMixerChannel &rArr; MixAudio &rArr; TryOpenAudioFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerStatus
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStatusHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
</UL>

<P><STRONG><a name="[1ba]"></a>SetMixerStatus</STRONG> (Thumb, 298 bytes, Stack size 12 bytes, engine.o(i.SetMixerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetMixerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerChannel
</UL>

<P><STRONG><a name="[1bb]"></a>SetOneSystemParam</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, systemconfig.o(i.SetOneSystemParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetOneSystemParam &rArr; CheckParamIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveSystemParam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamSetCmdHandler
</UL>

<P><STRONG><a name="[1bc]"></a>SetOneVehicleParam</STRONG> (Thumb, 1580 bytes, Stack size 40 bytes, mixerconfig.o(i.SetOneVehicleParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetOneVehicleParam &rArr; CheckParamIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckParamIndex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveVehicleParam
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamSetCmdHandler
</UL>

<P><STRONG><a name="[1bd]"></a>SetPassword</STRONG> (Thumb, 136 bytes, Stack size 168 bytes, password.o(i.SetPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 4336 + Unknown Stack Size
<LI>Call Chain = SetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPasswordValid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordCmdHandler
</UL>

<P><STRONG><a name="[cb]"></a>SetPasswordCmdHandler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bledatalayer.o(i.SetPasswordCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360 + Unknown Stack Size
<LI>Call Chain = SetPasswordCmdHandler &rArr; SetPassword &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[db]"></a>SetPasswordInvalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, password.o(i.SetPasswordInvalid))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleDisconnectCmdHandler
</UL>

<P><STRONG><a name="[82]"></a>SetSystmError</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, systemerror.o(i.SetSystmError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSystmError
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTheMostSeriousError
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeEngineFile
</UL>

<P><STRONG><a name="[1bf]"></a>SoftwareDisableWriteProtoct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spiflash.o(i.SoftwareDisableWriteProtoct))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SoftwareDisableWriteProtoct &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[159]"></a>SpiFlashHwInit</STRONG> (Thumb, 496 bytes, Stack size 72 bytes, spiflash.o(i.SpiFlashHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpiFlashHwInit &rArr; SstReadId &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[1c3]"></a>SstReadId</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spiflash.o(i.SstReadId))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SstReadId &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashHwInit
</UL>

<P><STRONG><a name="[181]"></a>StartAudioPlay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mixer.o(i.StartAudioPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartAudioPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[182]"></a>StopAuidoPlay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mixer.o(i.StopAuidoPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopAuidoPlay &rArr; AmplifierControlHandler &rArr; AmplifierEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[180]"></a>StopDonwload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, downloader.o(i.StopDonwload))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
</UL>

<P><STRONG><a name="[127]"></a>StopMixer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mixer.o(i.StopMixer))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
</UL>

<P><STRONG><a name="[c]"></a>SysTickHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTickInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTickConfiguration
</UL>

<P><STRONG><a name="[1c5]"></a>SysTick_CounterCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTickConfiguration
</UL>

<P><STRONG><a name="[1c6]"></a>SysTick_ITConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTickConfiguration
</UL>

<P><STRONG><a name="[1c8]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTickConfiguration
</UL>

<P><STRONG><a name="[b7]"></a>SystemInfoRequestCmdHandler</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, bledatalayer.o(i.SystemInfoRequestCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemInfoRequestCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[b9]"></a>SystemParamRequestCmdHandler</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, bledatalayer.o(i.SystemParamRequestCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemParamRequestCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneSystemParam
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[ba]"></a>SystemParamSetCmdHandler</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, bledatalayer.o(i.SystemParamSetCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemParamSetCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneSystemParam
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[bb]"></a>SystemParamStoreCmdHandler</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, bledatalayer.o(i.SystemParamStoreCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4208 + Unknown Stack Size
<LI>Call Chain = SystemParamStoreCmdHandler &rArr; WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[157]"></a>SystemTickConfiguration</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, actiontick.o(i.SystemTickConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemTickConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ITConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
</UL>

<P><STRONG><a name="[1c4]"></a>SystemTickInterruptHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, actiontick.o(i.SystemTickInterruptHandler))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TAMPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_UP_IRQHandler &rArr; AudioOutTimerIntHandler &rArr; GetOnChipAudioData
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutTimerIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HalSpeedTimerIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalSpeedTimerIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM6_IRQHandler &rArr; MixerChannel0IntHandler &rArr; AudioOutDac
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel0IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM7_IRQHandler &rArr; MixerChannel1IntHandler &rArr; AudioOutDac
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel1IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
</UL>

<P><STRONG><a name="[ab]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutTimerIntHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel1IntHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerChannel0IntHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalSpeedTimerIntHandler
</UL>

<P><STRONG><a name="[a5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAuidoPlay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAudioPlay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[a4]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[a3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[a2]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutHwConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineMixerChannelInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedHalHwInit
</UL>

<P><STRONG><a name="[167]"></a>TryChangeVehileIndexLoop</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, mixer.o(i.TryChangeVehileIndexLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 5328 + Unknown Stack Size
<LI>Call Chain = TryChangeVehileIndexLoop &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipAudioPlay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
</UL>

<P><STRONG><a name="[1b8]"></a>TryChangeVehileRollBack</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, mixer.o(i.TryChangeVehileRollBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 5320 + Unknown Stack Size
<LI>Call Chain = TryChangeVehileRollBack &rArr; AnalyOneSoundIndex &rArr; AnalyzeEngineFile &rArr; GetEngineInfo &rArr; CutAudioOneSpeed &rArr; ReadFile &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipAudioPlay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyOneSoundIndex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierEnable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectVehicleCmdHandler
</UL>

<P><STRONG><a name="[120]"></a>TryCloseAudioFile</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, engine.o(i.TryCloseAudioFile))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithoutStopFile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStopingHandlerWithStopFile
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
</UL>

<P><STRONG><a name="[17c]"></a>TryOpenAudioFile</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, engine.o(i.TryOpenAudioFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TryOpenAudioFile
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAudioFile
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixAudio
</UL>

<P><STRONG><a name="[1b1]"></a>TryRecoverOneAudioFile</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fs.o(i.TryRecoverOneAudioFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4344<LI>Call Chain = TryRecoverOneAudioFile &rArr; RecoverOneAudioFile &rArr; DeleteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverOneAudioFile
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneFileWhole
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBadAudio
</UL>

<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART3_IRQHandler &rArr; BleComIntHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComIntHandler
</UL>

<P><STRONG><a name="[d2]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComEnable
</UL>

<P><STRONG><a name="[d8]"></a>USART_GetITStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComIntHandler
</UL>

<P><STRONG><a name="[d1]"></a>USART_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComIntHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComEnable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComSendData
</UL>

<P><STRONG><a name="[d5]"></a>USART_Init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComHwInit
</UL>

<P><STRONG><a name="[d6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComHwInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleComSendData
</UL>

<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_HP_CAN_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_LP_CAN_RX0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>VehicleParamRequestCmdHandler</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, bledatalayer.o(i.VehicleParamRequestCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = VehicleParamRequestCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneVehicleParam
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[bd]"></a>VehicleParamSetCmdHandler</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, bledatalayer.o(i.VehicleParamSetCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VehicleParamSetCmdHandler &rArr; BleSendErrorPacket &rArr; BleSendOneFrame &rArr; BleComSendData &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneVehicleParam
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[be]"></a>VehicleParamStoreCmdHandler</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, bledatalayer.o(i.VehicleParamStoreCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4216 + Unknown Stack Size
<LI>Call Chain = VehicleParamStoreCmdHandler &rArr; WriteVehicleParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1cc]"></a>VolumeHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mixer.o(i.VolumeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VolumeHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>WaitFlashFree</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spiflash.o(i.WaitFlashFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSpiRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
</UL>

<P><STRONG><a name="[df]"></a>WriteEnable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spiflash.o(i.WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
</UL>

<P><STRONG><a name="[93]"></a>WriteFile</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, fs.o(i.WriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4312<LI>Call Chain = WriteFile &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[91]"></a>WriteFileWithAlloc</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, fs.o(i.WriteFileWithAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4336<LI>Call Chain = WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocOneFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>

<P><STRONG><a name="[1cd]"></a>WriteOneParamToTable</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, param.o(i.WriteOneParamToTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteOneParamToTable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>

<P><STRONG><a name="[1ce]"></a>WriteParamSector</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs.o(i.WriteParamSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSystemParamTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVehicleParamTable
</UL>

<P><STRONG><a name="[1cf]"></a>WriteSoundBlockData</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, downloader.o(i.WriteSoundBlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteSoundBlockData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockDataCmdHandler
</UL>

<P><STRONG><a name="[c4]"></a>WriteSoundBlockDataCmdHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bledatalayer.o(i.WriteSoundBlockDataCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteSoundBlockDataCmdHandler &rArr; WriteSoundBlockData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundBlockData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1d0]"></a>WriteSoundFinish</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, downloader.o(i.WriteSoundFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 5456 + Unknown Stack Size
<LI>Call Chain = WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSoundBlockIndex
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioFileConvert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinishCmdHandler
</UL>

<P><STRONG><a name="[c6]"></a>WriteSoundFinishCmdHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bledatalayer.o(i.WriteSoundFinishCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 5472 + Unknown Stack Size
<LI>Call Chain = WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundFinish
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[1d1]"></a>WriteSoundStart</STRONG> (Thumb, 274 bytes, Stack size 120 bytes, downloader.o(i.WriteSoundStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4392<LI>Call Chain = WriteSoundStart &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashWriteData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartDownloader
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DivCeil
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStartCmdHandler
</UL>

<P><STRONG><a name="[c2]"></a>WriteSoundStartCmdHandler</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, bledatalayer.o(i.WriteSoundStartCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4432<LI>Call Chain = WriteSoundStartCmdHandler &rArr; WriteSoundStart &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoundStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPasswordPassed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendOneFrame
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendErrorPacket
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalysisMessageId
</UL>

<P><STRONG><a name="[ed]"></a>WriteSystemParamTable</STRONG> (Thumb, 174 bytes, Stack size 4104 bytes, systemconfig.o(i.WriteSystemParamTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168 + Unknown Stack Size
<LI>Call Chain = WriteSystemParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneParamToTable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSum
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinusVolume
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParamStoreCmdHandler
</UL>

<P><STRONG><a name="[168]"></a>WriteVehicleParamTable</STRONG> (Thumb, 558 bytes, Stack size 4112 bytes, mixerconfig.o(i.WriteVehicleParamTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = WriteVehicleParamTable &rArr; WriteParamSector &rArr; DataFlashDirectWriteData &rArr; WriteEnable &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParamSector
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneParamToTable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSum
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamStoreCmdHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadVehicleCfgFromSoundFile
</UL>

<P><STRONG><a name="[b2]"></a>decrypt</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, tea.o(i.decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthorizePassword
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
</UL>

<P><STRONG><a name="[13f]"></a>expo</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, motorspeedhal.o(i.expo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = expo &rArr; expou
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expou
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistSpeedHal
</UL>

<P><STRONG><a name="[1d3]"></a>expou</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, motorspeedhal.o(i.expou))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = expou
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expo
</UL>

<P><STRONG><a name="[ea]"></a>mDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, actiontick.o(i.mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mDelay &rArr; KeyStatusHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileRollBack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCheck
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPassword
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleParamRequestCmdHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeProgeramCmdHandler
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512 + Unknown Stack Size
<LI>Call Chain = main &rArr; BleAnalyzeTransportLayer &rArr; OneFrameCheckAndHandle &rArr; BleAnalysisMessageId &rArr; WriteSoundFinishCmdHandler &rArr; WriteSoundFinish &rArr; AudioFileConvert &rArr; DecryptionConvertMp3 &rArr; WriteFileWithAlloc &rArr; AllocOneFreeBlock &rArr; DataFlashWriteData &rArr; FlashWriteCheck &rArr; DataFlashReadData &rArr; WaitFlashFree &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipLedHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerBleTopLevelHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllPeriph
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsaPrivateKey
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceId
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAuthorizeRSAPulbicKey
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvMotorSpeedHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloaderInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAnalyzeTransportLayer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSystemConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeDeviceConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmplifierControlHandler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryChangeVehileIndexLoop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTopLevelHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFs
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineStartHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e0]"></a>spi_write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spiflash.o(i.spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDirectWriteData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitFlashFree
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SstReadId
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareDisableWriteProtoct
</UL>

<P><STRONG><a name="[179]"></a>xmp3fixpt_AllocateBuffers</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, buffers.o(i.xmp3fixpt_AllocateBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xmp3fixpt_AllocateBuffers &rArr; ClearBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBuffer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_FreeBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3InitDecoder
</UL>

<P><STRONG><a name="[1f0]"></a>xmp3fixpt_CalcBitsUsed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bitstream.o(i.xmp3fixpt_CalcBitsUsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xmp3fixpt_CalcBitsUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[172]"></a>xmp3fixpt_CheckPadBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bitstream.o(i.xmp3fixpt_CheckPadBit))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[175]"></a>xmp3fixpt_DecodeHuffman</STRONG> (Thumb, 542 bytes, Stack size 112 bytes, huffman.o(i.xmp3fixpt_DecodeHuffman))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xmp3fixpt_DecodeHuffman &rArr; DecodeHuffmanPairs
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHuffmanQuads
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHuffmanPairs
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[1e0]"></a>xmp3fixpt_DequantChannel</STRONG> (Thumb, 634 bytes, Stack size 104 bytes, dqchan.o(i.xmp3fixpt_DequantChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = xmp3fixpt_DequantChannel &rArr; DequantBlock &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DequantBlock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLZ
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[176]"></a>xmp3fixpt_Dequantize</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, dequant.o(i.xmp3fixpt_Dequantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = xmp3fixpt_Dequantize &rArr; xmp3fixpt_IntensityProcMPEG2 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_MidSideProc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG2
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DequantChannel
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLZ
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[1e6]"></a>xmp3fixpt_FDCT32</STRONG> (Thumb, 3372 bytes, Stack size 120 bytes, dct32.o(i.xmp3fixpt_FDCT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xmp3fixpt_FDCT32 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
</UL>

<P><STRONG><a name="[1dc]"></a>xmp3fixpt_FreeBuffers</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buffers.o(i.xmp3fixpt_FreeBuffers))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_AllocateBuffers
</UL>

<P><STRONG><a name="[1ca]"></a>xmp3fixpt_GetBits</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bitstream.o(i.xmp3fixpt_GetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xmp3fixpt_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefillBitstreamCache
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackSideInfo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG2
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG1
</UL>

<P><STRONG><a name="[177]"></a>xmp3fixpt_IMDCT</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, imdct.o(i.xmp3fixpt_IMDCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = xmp3fixpt_IMDCT &rArr; HybridTransform &rArr; IMDCT36 &rArr; idct9 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiAlias
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[1e3]"></a>xmp3fixpt_IntensityProcMPEG1</STRONG> (Thumb, 744 bytes, Stack size 128 bytes, stproc.o(i.xmp3fixpt_IntensityProcMPEG1))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xmp3fixpt_IntensityProcMPEG1 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[1e4]"></a>xmp3fixpt_IntensityProcMPEG2</STRONG> (Thumb, 706 bytes, Stack size 216 bytes, stproc.o(i.xmp3fixpt_IntensityProcMPEG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = xmp3fixpt_IntensityProcMPEG2 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[1e2]"></a>xmp3fixpt_MidSideProc</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, stproc.o(i.xmp3fixpt_MidSideProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xmp3fixpt_MidSideProc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[1eb]"></a>xmp3fixpt_PolyphaseMono</STRONG> (Thumb, 1606 bytes, Stack size 80 bytes, polyphase.o(i.xmp3fixpt_PolyphaseMono))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xmp3fixpt_PolyphaseMono &rArr; SAR64
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR64
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MADD64
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipToShort
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
</UL>

<P><STRONG><a name="[1ee]"></a>xmp3fixpt_PolyphaseStereo</STRONG> (Thumb, 2936 bytes, Stack size 96 bytes, polyphase.o(i.xmp3fixpt_PolyphaseStereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xmp3fixpt_PolyphaseStereo &rArr; SAR64
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR64
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MADD64
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipToShort
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Subband
</UL>

<P><STRONG><a name="[1ef]"></a>xmp3fixpt_SetBitstreamPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bitstream.o(i.xmp3fixpt_SetBitstreamPointer))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackSideInfo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[178]"></a>xmp3fixpt_Subband</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, subband.o(i.xmp3fixpt_Subband))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = xmp3fixpt_Subband &rArr; xmp3fixpt_FDCT32 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_FDCT32
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseStereo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseMono
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[16e]"></a>xmp3fixpt_UnpackFrameHeader</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, bitstream.o(i.xmp3fixpt_UnpackFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmp3fixpt_UnpackFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[174]"></a>xmp3fixpt_UnpackScaleFactors</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, scalfact.o(i.xmp3fixpt_UnpackScaleFactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xmp3fixpt_UnpackScaleFactors &rArr; UnpackSFMPEG2 &rArr; xmp3fixpt_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_SetBitstreamPointer
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_CalcBitsUsed
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG2
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackSFMPEG1
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[16f]"></a>xmp3fixpt_UnpackSideInfo</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, bitstream.o(i.xmp3fixpt_UnpackSideInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xmp3fixpt_UnpackSideInfo &rArr; xmp3fixpt_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_SetBitstreamPointer
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[163]"></a>OneKeyHandler</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, key.o(i.OneKeyHandler))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatusHandler
</UL>

<P><STRONG><a name="[110]"></a>Mp3ReadId3V2Tag</STRONG> (Thumb, 426 bytes, Stack size 88 bytes, mp3convert.o(i.Mp3ReadId3V2Tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Mp3ReadId3V2Tag &rArr; Mp3ReadId3V2Text &rArr; Mp3HeadRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadSeek
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadRead
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Text
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptionConvertMp3
</UL>

<P><STRONG><a name="[18d]"></a>Mp3ReadId3V2Text</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mp3convert.o(i.Mp3ReadId3V2Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mp3ReadId3V2Text &rArr; Mp3HeadRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadSeek
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3HeadRead
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3ReadId3V2Tag
</UL>

<P><STRONG><a name="[16c]"></a>Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5c.o(i.Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[169]"></a>Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md5c.o(i.Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[16b]"></a>MD5Transform</STRONG> (Thumb, 1908 bytes, Stack size 96 bytes, md5c.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[190]"></a>NN_DigitBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nn.o(i.NN_DigitBits))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[19c]"></a>dmult</STRONG> (Thumb, 134 bytes, Stack size 44 bytes, nn.o(i.dmult))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dmult
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdigitmult
</UL>

<P><STRONG><a name="[193]"></a>subdigitmult</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, nn.o(i.subdigitmult))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmult
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[1af]"></a>rsaprivatefunc</STRONG> (Thumb, 510 bytes, Stack size 1632 bytes, rsa.o(i.rsaprivatefunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3388<LI>Call Chain = rsaprivatefunc &rArr; NN_ModExp &rArr; NN_ModMult &rArr; NN_Mod &rArr; NN_Div &rArr; subdigitmult &rArr; dmult
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_memset
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Digits
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAPrivateDecrypt
</UL>

<P><STRONG><a name="[170]"></a>MP3ClearBadFrame</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mp3dec.o(i.MP3ClearBadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MP3ClearBadFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[171]"></a>MP3FindFreeSync</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mp3dec.o(i.MP3FindFreeSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MP3FindFreeSync
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3FindSyncWord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Decode
</UL>

<P><STRONG><a name="[1e8]"></a>RefillBitstreamCache</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, bitstream.o(i.RefillBitstreamCache))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>

<P><STRONG><a name="[1dd]"></a>ClearBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, buffers.o(i.ClearBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_AllocateBuffers
</UL>

<P><STRONG><a name="[1e7]"></a>MULSHIFT32</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, dct32.o(i.MULSHIFT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_FDCT32
</UL>

<P><STRONG><a name="[1e5]"></a>CLZ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dequant.o(i.CLZ))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_Dequantize
</UL>

<P><STRONG><a name="[1e1]"></a>CLZ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dqchan.o(i.CLZ))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DequantChannel
</UL>

<P><STRONG><a name="[116]"></a>DequantBlock</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, dqchan.o(i.DequantBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DequantBlock &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DequantChannel
</UL>

<P><STRONG><a name="[117]"></a>MULSHIFT32</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, dqchan.o(i.MULSHIFT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DequantBlock
</UL>

<P><STRONG><a name="[1de]"></a>DecodeHuffmanPairs</STRONG> (Thumb, 896 bytes, Stack size 80 bytes, huffman.o(i.DecodeHuffmanPairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DecodeHuffmanPairs
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DecodeHuffman
</UL>

<P><STRONG><a name="[1df]"></a>DecodeHuffmanQuads</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, huffman.o(i.DecodeHuffmanQuads))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DecodeHuffmanQuads
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_DecodeHuffman
</UL>

<P><STRONG><a name="[89]"></a>AntiAlias</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, imdct.o(i.AntiAlias))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AntiAlias &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IMDCT
</UL>

<P><STRONG><a name="[13b]"></a>FASTABS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imdct.o(i.FASTABS))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
</UL>

<P><STRONG><a name="[13a]"></a>FreqInvertRescale</STRONG> (Thumb, 516 bytes, Stack size 72 bytes, imdct.o(i.FreqInvertRescale))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FreqInvertRescale
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
</UL>

<P><STRONG><a name="[14d]"></a>HybridTransform</STRONG> (Thumb, 380 bytes, Stack size 152 bytes, imdct.o(i.HybridTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = HybridTransform &rArr; IMDCT36 &rArr; idct9 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IMDCT
</UL>

<P><STRONG><a name="[14f]"></a>IMDCT12x3</STRONG> (Thumb, 486 bytes, Stack size 200 bytes, imdct.o(i.IMDCT12x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IMDCT12x3 &rArr; FreqInvertRescale
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[14e]"></a>IMDCT36</STRONG> (Thumb, 572 bytes, Stack size 240 bytes, imdct.o(i.IMDCT36))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = IMDCT36 &rArr; idct9 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idct9
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreqInvertRescale
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FASTABS
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[8a]"></a>MULSHIFT32</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, imdct.o(i.MULSHIFT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct12
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idct9
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPrevious
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiAlias
</UL>

<P><STRONG><a name="[150]"></a>WinPrevious</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, imdct.o(i.WinPrevious))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WinPrevious &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HybridTransform
</UL>

<P><STRONG><a name="[152]"></a>idct9</STRONG> (Thumb, 454 bytes, Stack size 192 bytes, imdct.o(i.idct9))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = idct9 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT36
</UL>

<P><STRONG><a name="[151]"></a>imdct12</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, imdct.o(i.imdct12))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = imdct12 &rArr; MULSHIFT32
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT12x3
</UL>

<P><STRONG><a name="[1ed]"></a>ClipToShort</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, polyphase.o(i.ClipToShort))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseStereo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseMono
</UL>

<P><STRONG><a name="[1ec]"></a>MADD64</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, polyphase.o(i.MADD64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MADD64
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseStereo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseMono
</UL>

<P><STRONG><a name="[1b5]"></a>SAR64</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, polyphase.o(i.SAR64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAR64
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseStereo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_PolyphaseMono
</UL>

<P><STRONG><a name="[1c9]"></a>UnpackSFMPEG1</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, scalfact.o(i.UnpackSFMPEG1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UnpackSFMPEG1 &rArr; xmp3fixpt_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[1cb]"></a>UnpackSFMPEG2</STRONG> (Thumb, 710 bytes, Stack size 104 bytes, scalfact.o(i.UnpackSFMPEG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UnpackSFMPEG2 &rArr; xmp3fixpt_GetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_GetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_UnpackScaleFactors
</UL>

<P><STRONG><a name="[1ea]"></a>FASTABS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stproc.o(i.FASTABS))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_MidSideProc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG2
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG1
</UL>

<P><STRONG><a name="[1e9]"></a>MULSHIFT32</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, stproc.o(i.MULSHIFT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MULSHIFT32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG2
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmp3fixpt_IntensityProcMPEG1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
